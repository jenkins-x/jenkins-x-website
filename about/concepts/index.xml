<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – Concepts</title>
    <link>https://jenkins-x.io/about/concepts/</link>
    <description>Recent content in Concepts on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/about/concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>About: Components</title>
      <link>https://jenkins-x.io/about/concepts/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/about/concepts/components/</guid>
      <description>
        
        
        &lt;p&gt;An installation of Jenkins X consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a Development Environment per team which is a &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;zero to many other &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#environments&#34;&gt;Permanent Environments&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;the out of the box is for each team to get their own &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environments&lt;/li&gt;
&lt;li&gt;each team can have as many environments as they wish and can call them whatever they like&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;optional &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically each environment is associated with its own &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/&#34;&gt;kubernetes namespace&lt;/a&gt; which are usually different to ensure clean isolation between the environments.&lt;/p&gt;
&lt;p&gt;Though technically 2 teams could share the same underlying namespace for, say, &lt;code&gt;Staging&lt;/code&gt; though we advise separation to keep things simple - otherwise changes in one git repo could conflict with changes in another if they both configure the same namespace; due to, say, service resource name or DNS conflicts. If you wish 2 teams to share the same underlying microservices its much simpler to just use &lt;code&gt;service linking&lt;/code&gt; to link services in one namespace to another so that they appear as local services with local DNS.&lt;/p&gt;
&lt;p&gt;See the full list of &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/&#34;&gt;components of Jenkins X&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;development-environment&#34;&gt;Development Environment&lt;/h2&gt;
&lt;p&gt;In the dev environment we have installed a number of core applications we believe are required at a minimum to start folks off with CI/CD on Kubernetes.&lt;/p&gt;
&lt;p&gt;We also support &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#applications&#34;&gt;addons&lt;/a&gt; to extend this core set.&lt;/p&gt;
&lt;p&gt;Jenkins X comes with configuration that wires these services together meaning everything works together straight away. This dramatically reduces the time to get started with Kubernetes as all the passwords, environment variables and config files are all setup up to work with each other.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;  — provides both CI and CD automation. There is an effort to decompose Jenkins over time to become more cloud native and make use of Kubernetes concepts around CRDs, storage and scaling for example.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nexus&lt;/strong&gt; — acts as a dependency cache for NodeJS and Java applications to dramatically improve build times. After an initial build of a SpringBoot application the build time is reduced from 12 minutes to 4. We have not yet but intend to demonstrate swapping this with Artifactory soon.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker registry&lt;/strong&gt;  — an in cluster docker registry where our pipelines push application images, we will soon switch to using native cloud provider registries such as Google Container Registry, Azure Container Registry or Amazon Elastic Container Registry (ECR) for example.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChartMuseum&lt;/strong&gt; — a Repository for publishing Helm charts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monocular&lt;/strong&gt;  — a UI used for discovering and running Helm charts&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;permanent-environments&#34;&gt;Permanent Environments&lt;/h2&gt;
&lt;p&gt;These &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#environments&#34;&gt;environments&lt;/a&gt;, like &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; use GitOps to manage themselves and so each have a git repository containing the source code to configure all the applications and services which are deployed there.&lt;/p&gt;
&lt;p&gt;Typically we use Helm charts in these git repositories to define which charts are to be installed, which versions of them and any environment specific configuration and additional resources (e.g. Secrets or operational applications like Prometheus etc)&lt;/p&gt;
&lt;h2 id=&#34;preview-environments&#34;&gt;Preview Environments&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#preview-environments&#34;&gt;Preview Environments&lt;/a&gt; are similar to &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#environments&#34;&gt;Permanent Environments&lt;/a&gt; in that they are defined in source code using Helm charts.&lt;/p&gt;
&lt;p&gt;The main difference is preview environments are configured inside the application source code in the &lt;code&gt;./chart/preview&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Also they are not permanent but created on a Pull Request to an applications git repository and then deleted some time after (manually or via automatic garbage collection).&lt;/p&gt;
&lt;h2 id=&#34;ingress-custom-annotations&#34;&gt;Ingress Custom Annotations&lt;/h2&gt;
&lt;p&gt;To learn how to add custom annotations to the ingress controller, please see &lt;a href=&#34;https://jenkins-x.io/docs/resources/faq/using/#how-to-add-custom-annotations-to-ingress-controller&#34;&gt;How To Add Custom Annotations to Ingress Controller?&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>About: Diagram</title>
      <link>https://jenkins-x.io/about/concepts/diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/about/concepts/diagram/</guid>
      <description>
        
        
        &lt;h2 id=&#34;jenkins-x-with-tekton--lighthousehttpsgithubcomjenkins-xlighthouse&#34;&gt;Jenkins X with Tekton &amp;amp; &lt;a href=&#34;https://github.com/jenkins-x/lighthouse&#34;&gt;Lighthouse&lt;/a&gt;&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&#34;https://jenkins-x.io/images/ArchitectureServerlessJenkinsLighthouse.png&#34;/&gt;
&lt;figcaption&gt;
&lt;h5&gt;Architecture for a serverless deployment using Tekton Pipelines and Lighthouse&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>About: Features</title>
      <link>https://jenkins-x.io/about/concepts/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/about/concepts/features/</guid>
      <description>
        
        
        &lt;h2 id=&#34;command-line&#34;&gt;Command Line&lt;/h2&gt;
&lt;p&gt;Jenkins X comes with a handy &lt;a href=&#34;https://jenkins-x.io/commands/jx/&#34;&gt;jx&lt;/a&gt; command line tool to easily:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;install Jenkins X&lt;/a&gt; inside your existing kubernetes cluster&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/create-cluster/&#34;&gt;create a new kubernetes cluster&lt;/a&gt; and install Jenkins X into it&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/creating/import/&#34;&gt;import projects&lt;/a&gt; into Jenkins X and their Continuous Delivery pipelines setup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/developing/create-spring/&#34;&gt;create new Spring Boot applications&lt;/a&gt; which get imported into Jenkins X and their Continuous Delivery pipelines setup&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;automated-pipelines&#34;&gt;Automated Pipelines&lt;/h2&gt;
&lt;p&gt;Jenkins X will automatically set up awesome pipelines for your projects that fully implement both CI and CD using &lt;a href=&#34;https://jenkins-x.io/about/concepts/&#34;&gt;DevOps best practices&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;environments&#34;&gt;Environments&lt;/h2&gt;
&lt;p&gt;An &lt;em&gt;environment&lt;/em&gt; is a place where applications get deployed. Developers often refer to environments using a short name like &lt;code&gt;Testing, Staging/UAT or Production&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With Jenkins X each &lt;em&gt;team&lt;/em&gt; gets its own Environments. By default Jenkins X creates a &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; environment for each team but you can create new environments via &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_environment/&#34;&gt;jx create environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is also the &lt;code&gt;Dev&lt;/code&gt; environment which is where tools like Tekton, Nexus or Prow are installed and where CI/CD pipelines run.&lt;/p&gt;
&lt;p&gt;We use GitOps to manage the configuration and version of the kubernetes resources which are deployed to each environment. So each Environment has its own git repository that contains all the Helm Charts, their versions and the configuration for the applications be run in the environment.&lt;/p&gt;
&lt;p&gt;An Environment maps to a namespace in a Kubernetes cluster. When Pull Requests are merged into the environments git repository the pipeline runs for the environment which then applies the helm charts in git to the environments namespace.&lt;/p&gt;
&lt;p&gt;This means both developers and operations can use the same git repository to manage all the configuration and versions of all the applications and resources for an environment in the same git repository and all changes to the environment are captured in git. So its easy to see who made changes when and more importantly its then easy to revert changes which cause bad things to happen.&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/gitops.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;teams&#34;&gt;Teams&lt;/h2&gt;
&lt;p&gt;A Team in Jenkins X is represented by an install of Jenkins X in a separate namespace.&lt;/p&gt;
&lt;p&gt;You can install Jenkins X into different namespaces in the same cluster if you wish using the &lt;code&gt;--namespace&lt;/code&gt; command line argument in &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster/&#34;&gt;jx create cluster&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx install&lt;/a&gt;. Note that to support multiple installs of Jenkins X in the same cluster you need to &lt;a href=&#34;https://jenkins-x.io/news/helm-without-tiller/&#34;&gt;avoid Tiller if you are using helm 2.x&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also use the &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_team/&#34;&gt;jx create team&lt;/a&gt; CLI which creates a new &lt;code&gt;Team&lt;/code&gt; &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/custom-resources/&#34;&gt;Custom Resource&lt;/a&gt; then in the background the team controller will create a new Jenkins X install in the teams namespaces, by default reusing the same underlying nexus and docker registry.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/config/&#34;&gt;configuration guide&lt;/a&gt; for more details on how to share resources like Nexus across Teams.&lt;/p&gt;
&lt;h2 id=&#34;promotion&#34;&gt;Promotion&lt;/h2&gt;
&lt;p&gt;Promotion is implemented with GitOps by generating a pull request on the Environment&amp;rsquo;s git repository  so that all changes go through git for audit, approval and so that any change is easy to revert.&lt;/p&gt;
&lt;p&gt;When a new change to an environments git repository is merged to master, the pipeline for the environment triggers which applies any changes to the resources via helm - using the source code from the git repository.&lt;/p&gt;
&lt;p&gt;The CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a &lt;em&gt;promotion strategy&lt;/em&gt; property of &lt;code&gt;Auto&lt;/code&gt;. By default the &lt;code&gt;Staging&lt;/code&gt; environment uses automatic promotion and the &lt;code&gt;Production&lt;/code&gt; environment uses &lt;code&gt;Manual&lt;/code&gt; promotion.&lt;/p&gt;
&lt;p&gt;To manually promote a version of an application to an environment you can use &lt;a href=&#34;https://jenkins-x.io/developing/promote/&#34;&gt;jx promote&lt;/a&gt; command.&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/overview.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;preview-environments&#34;&gt;Preview Environments&lt;/h2&gt;
&lt;p&gt;Jenkins X lets you spin up Preview Environments for your Pull Requests so you can get fast feedback before changes are merged to master. This gives you faster feedback for your changes before they are merged and released and allows you to avoid having human approval inside your release pipeline to speed up delivery of changes merged to master.&lt;/p&gt;
&lt;p&gt;When the Preview Environment is up and running Jenkins X will comment on your Pull Request with a link so in one click your team members can try out the preview!&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/pr-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;As you can see above Jenkins X automatically comments on your Pull Requests when using Preview Environments.&lt;/p&gt;
&lt;p&gt;If the commit comments reference issues (e.g. via the text &lt;code&gt;fixes #123&lt;/code&gt;) then Jenkins X pipelines will generate release notes like those of &lt;a href=&#34;https://github.com/jenkins-x/jx/releases&#34;&gt;the jx releases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also as the version with those new commits is promoted to &lt;code&gt;Staging&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment. e.g.&lt;/p&gt;
&lt;img src=&#34;https://jenkins-x.io/images/issue-comment.png&#34; class=&#34;img-thumbnail&#34;&gt;
&lt;h2 id=&#34;applications&#34;&gt;Applications&lt;/h2&gt;
&lt;p&gt;A collection of best of breed software tools packaged as helm charts that come pre-integrated with Jenkins X such as: Nexus, ChartMuseum, Monocular, Prometheus, Grafana etc&lt;/p&gt;
&lt;h3 id=&#34;addons&#34;&gt;Addons&lt;/h3&gt;
&lt;p&gt;Some of these applications are baked in; like: Nexus, ChartMuseum, Monocular.  Others are provided as an &lt;code&gt;Addon&lt;/code&gt; like &lt;a href=&#34;https://github.com/grafana/grafana&#34;&gt;Grafana&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To install an addon then use the &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_addon/&#34;&gt;jx create addon&lt;/a&gt; command. e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create addon grafana
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>About: Technology Questions</title>
      <link>https://jenkins-x.io/about/concepts/technology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/about/concepts/technology/</guid>
      <description>
        
        
        &lt;h2 id=&#34;what-is-helm&#34;&gt;What is Helm?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.helm.sh/&#34;&gt;helm&lt;/a&gt; is the open source package manager for Kubernetes.&lt;/p&gt;
&lt;p&gt;It works like other package mangers (brew, yum, npm etc) where there&amp;rsquo;s one or more repositories with packages to install (called &lt;code&gt;charts&lt;/code&gt; in helm to keep with the nautical kubernetes theme) which can be searched/installed and upgraded.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://docs.helm.sh/developing_charts/#charts&#34;&gt;helm chart is basically a versioned tarball of kubernetes yaml&lt;/a&gt; which can be easily installed on any kubnernetes cluster.&lt;/p&gt;
&lt;p&gt;Helm supports composition (a chart can contain other charts) via the &lt;code&gt;requirements.yaml&lt;/code&gt; file.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>About: Version Stream</title>
      <link>https://jenkins-x.io/about/concepts/version-stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/about/concepts/version-stream/</guid>
      <description>
        
        
        &lt;p&gt;Jenkins X is made up of a large number of command line &lt;em&gt;packages&lt;/em&gt;, &lt;em&gt;images&lt;/em&gt; and helm &lt;em&gt;charts&lt;/em&gt;, some of which are released by the Jenkins X community and others come from the wider open source ecosystem.&lt;/p&gt;
&lt;p&gt;To improve the stability of Jenkins X when lots of packages and charts are changing all the time we have introduced the Jenkins X &lt;code&gt;Version Stream&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://jenkins-x.io/images/jx-version-stream-v1.png&#34;/&gt;
&lt;figcaption&gt;
&lt;h5&gt;Diagram depicts how a new JX version will be propagated through the components.&lt;/h5&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The version stream is stored in the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34;&gt;jenkins-x/jenkins-x-versions&lt;/a&gt; git repository and stores the stable version of all packages and charts used by Jenkins X.&lt;/p&gt;
&lt;p&gt;When you run a command, such as to &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/create-cluster/&#34;&gt;create a cluster&lt;/a&gt;, &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/&#34;&gt;install on an existing cluster&lt;/a&gt; or run a &lt;a href=&#34;https://jenkins-x.io/commands/jx_upgrade/&#34;&gt;jx upgrade&lt;/a&gt; command the &lt;code&gt;jx&lt;/code&gt; command will ensure you have a local clone of the  &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34;&gt;jenkins-x/jenkins-x-versions&lt;/a&gt; git repository and it will then pull the stable version of any chart or package from that source - or log a warning if a version is not yet being maintained.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;jx&lt;/a&gt; release now defaults to being released as a &lt;a href=&#34;https://help.github.com/en/articles/creating-releases&#34;&gt;prerelease&lt;/a&gt;. Each release of jx is only updated to a full release so long as that released version successfully makes its way to the jenkins-x-versions repository where it also needs to pass another round of BDD tests (&lt;em&gt;see diagram above for more information&lt;/em&gt;).&lt;/p&gt;
&lt;h2 id=&#34;how-we-upgrade-the-version-stream&#34;&gt;How we upgrade the Version Stream&lt;/h2&gt;
&lt;p&gt;We use GitOps and CI/CD to manage the Version Stream.&lt;/p&gt;
&lt;p&gt;As new packages or charts are released we generate Pull Requests on the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34;&gt;jenkins-x/jenkins-x-versions&lt;/a&gt; git repository. We then trigger our &lt;a href=&#34;https://github.com/jenkins-x/bdd-jx&#34;&gt;BDD tests&lt;/a&gt; via &lt;a href=&#34;https://jenkins-x.io/commands/jx_step_bdd/&#34;&gt;jx step bdd&lt;/a&gt; and verify the new chart/package version works before merging changes. Currently we manually trigger the BDD tests via a comment of &lt;code&gt;/test this&lt;/code&gt; - but we hope to move to periodic triggering of the BDD tests (e.g. once per day).&lt;/p&gt;
&lt;p&gt;Pull Request approvers can also choose to run their own manual tests on Pull Requests if they want.&lt;/p&gt;
&lt;p&gt;Upon the successful completion of all BDD tests executed on the PR it will merge the change and execute an update to all jx dependencies (homebrew-jx, jx-docs, jx-tutorial and dev-env-base).&lt;/p&gt;
&lt;h2 id=&#34;creating-pull-requests&#34;&gt;Creating Pull Requests&lt;/h2&gt;
&lt;p&gt;We have a simple CLI command &lt;a href=&#34;https://jenkins-x.io/commands/jx_step_create_pullrequest_versions/&#34;&gt;jx step create pullrequest versions&lt;/a&gt; which can be used to automatically generate Pull Requests on the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions&#34;&gt;jenkins-x/jenkins-x-versions&lt;/a&gt; git repository.&lt;/p&gt;
&lt;p&gt;If you are the maintainer of an upstream chart that is used by Jenkins X it would be awesome to add this command at the end of your release pipeline to generate a Pull Request for us to upgrade Jenkins X to use your new release (after the BDD tests have run to verify things still work):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx step create pullrequest versions -n mychartName -v 1.2.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;mychartName&lt;/code&gt; is the fully qualified chart name using the remote repository prefix. e.g. &lt;code&gt;jenkins-x/prow&lt;/code&gt; is the name of the &lt;code&gt;prow&lt;/code&gt; chart maintained in the &lt;code&gt;jenkins-x&lt;/code&gt; chart repository.&lt;/p&gt;
&lt;h3 id=&#34;periodic-updates&#34;&gt;Periodic updates&lt;/h3&gt;
&lt;p&gt;Its not always easy/possible to update upstream pipelines to push version changes to Jenkins X via a Pull Request. So you can setup a periodic job to check for version upgrades for all charts or charts matching some kind of wildcard.&lt;/p&gt;
&lt;p&gt;e.g. to upgrade the versions of all the &lt;code&gt;jenkins-x&lt;/code&gt; maintained charts you can run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx step create version pr -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jenkins-x/*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;running-the-bdd-tests&#34;&gt;Running the BDD tests&lt;/h2&gt;
&lt;p&gt;From a git clone of master or a Pull Request you can run the BDD tests against the Pull Requests version combination by using the &lt;a href=&#34;https://jenkins-x.io/commands/jx_step_bdd/&#34;&gt;jx step bdd&lt;/a&gt; command and specifying &lt;code&gt;--dir .&lt;/code&gt; for the directory of the clone.&lt;/p&gt;
&lt;p&gt;e.g. you can run the BDD tests yourself via&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/jenkins-x/jenkins-x-versions.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# env vars for the git / jenkins secrets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GIT_PROVIDER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;github
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GIT_PROVIDER_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://github.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export BUILD_NUMBER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export JENKINS_CREDS_PSW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mypassword
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GIT_CREDS_PSW&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;XXXXXXX
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GIT_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YYYYY
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx step bdd --dir . --config jx/bdd/staticjenkins.yaml --gopath /tmp --git-provider&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$GIT_PROVIDER --git-provider-url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$GIT_PROVIDER_URL --git-username $GIT_USER --git-owner $GIT_USER --git-api-token $GIT_CREDS_PSW --default-admin-password $JENKINS_CREDS_PSW --no-delete-app --no-delete-repo --tests test-create-spring
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The various YAML files in the &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions/tree/master/jx/bdd&#34;&gt;jx/bdd folder&lt;/a&gt; contains a selection of different cluster configurations that can be used&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
