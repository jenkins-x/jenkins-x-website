<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – FAQ</title>
    <link>https://jenkins-x.io/docs/resources/faq/</link>
    <description>Recent content in FAQ on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/docs/resources/faq/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: General questions</title>
      <link>https://jenkins-x.io/docs/resources/faq/general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/faq/general/</guid>
      <description>
        
        
        &lt;p&gt;We have tried to collate common issues here with work arounds. If your issue isn&amp;rsquo;t listed here please &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;let us know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;is-jenkins-x-open-source&#34;&gt;Is Jenkins X Open Source?&lt;/h2&gt;
&lt;p&gt;Yes! All of Jenkins X source code and artifacts are open source; either Apache or MIT and will always remain so!&lt;/p&gt;
&lt;h2 id=&#34;how-does-jenkins-x-compare-to-jenkins&#34;&gt;How does Jenkins X compare to Jenkins?&lt;/h2&gt;
&lt;p&gt;Jenkins X provides &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#automated-pipelines&#34;&gt;automated CI + CD&lt;/a&gt; for applications on kubernetes with &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#promotion&#34;&gt;GitOps promotion through environments&lt;/a&gt; and &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#preview-environments&#34;&gt;preview environments on Pull Requests
&lt;/a&gt;. (See the &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/&#34;&gt;features for more details&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Jenkins is a general purpose CI/CD server that can be configured to do anything you like by adding plugins, changing configuration and writing your own pipelines.&lt;/p&gt;
&lt;p&gt;With Jenkins X you just &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/&#34;&gt;install Jenkins X&lt;/a&gt; which automatically sets up all of the various tools (helm, docker registry, nexus etc) and then &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/common-tasks/create-spring/&#34;&gt;create&lt;/a&gt;/&lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/creating/import/&#34;&gt;import&lt;/a&gt; projects and you get fully automated CI/CD and previews. This lets your developers focus on building applications while you delegate to Jenkins X to manage your CI+CD.&lt;/p&gt;
&lt;p&gt;Jenkins X supports different execution engines; so it can orchestrate a Jenkins server per team by reusing Jenkins in a docker container. Though when using &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines&lt;/a&gt; we use &lt;a href=&#34;https://tekton.dev/&#34;&gt;Tekton&lt;/a&gt; rather than Jenkins as the underlying CI/CD engine to provide a modern highly available cloud native architecture.&lt;/p&gt;
&lt;h2 id=&#34;is-jenkins-x-a-fork-of-jenkins&#34;&gt;Is Jenkins X a fork of Jenkins?&lt;/h2&gt;
&lt;p&gt;No! Jenkins X can orchestrate Jenkins by reusing it inside a container and configures it to be as kubernetes native as possible.&lt;/p&gt;
&lt;p&gt;Though when using &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines&lt;/a&gt; we use &lt;a href=&#34;https://tekton.dev/&#34;&gt;Tekton&lt;/a&gt; rather than Jenkins as the underlying CI/CD engine to provide a modern highly available cloud native architecture.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install and setup questions</title>
      <link>https://jenkins-x.io/docs/resources/faq/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/faq/setup/</guid>
      <description>
        
        
        &lt;p&gt;For more detail check out how to use &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;jx boot&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-upgrade-boot&#34;&gt;How do I upgrade boot?&lt;/h2&gt;
&lt;p&gt;If you are using &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;jx boot&lt;/a&gt; you can upgrade via &lt;code&gt;jx upgrade boot&lt;/code&gt;.
Refer to &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/upgrade-jx/#upgrading-jenkins-x&#34;&gt;Upgrading Jenkins X&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;If anything ever goes wrong (e.g. your cluster, namespace or tekton gets deleted), you can always re-run &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;jx boot&lt;/a&gt; on your laptop to restore your cluster.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-add-more-resources&#34;&gt;How do I add more resources?&lt;/h2&gt;
&lt;p&gt;Add more resources (e.g. &lt;code&gt;Ingress, ConfigMap, Secret&lt;/code&gt;) to your development environment by adding YAML files to the boot &lt;code&gt;env/templates&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-add-new-environments&#34;&gt;How do I add new Environments?&lt;/h2&gt;
&lt;p&gt;Add a new &lt;code&gt;SourceRepository&lt;/code&gt; and &lt;code&gt;Environment&lt;/code&gt; resource to the &lt;code&gt;env/templates&lt;/code&gt; folder for each new environment you want tto create. We’ve only added &lt;code&gt;dev, staging, production&lt;/code&gt; currently.&lt;/p&gt;
&lt;p&gt;From your running cluster you can always grab the staging &lt;code&gt;SourceRepository&lt;/code&gt; and &lt;code&gt;Environment&lt;/code&gt; resource via the following (where XXX is the name of the staging repository returned via &lt;code&gt;kubectl get sr&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get env staging -oyaml &amp;gt; env/templates/myenv.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get sr XXX -oyaml &amp;gt; env/templates/myenv-sr.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then modify the YAML to suit, changing the names of the resources to avoid clashing with your staging repository.&lt;/p&gt;
&lt;h2 id=&#34;how-to-to-manage-sourcerepository-resources&#34;&gt;How to to manage SourceRepository resources?&lt;/h2&gt;
&lt;p&gt;See how to update your &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/how-it-works/#source-repositories&#34;&gt;boot configuration with the latest SourceRepository resources&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-map-sourcerepository-to-a-custom-scheduler&#34;&gt;How do I map SourceRepository to a custom Scheduler&lt;/h2&gt;
&lt;p&gt;You need to map your &lt;code&gt;SourceRepository&lt;/code&gt; to a &lt;code&gt;Scheduler&lt;/code&gt; via either specifying &lt;code&gt;--scheduler&lt;/code&gt; when you &lt;code&gt;jx create quickstart / jx import&lt;/code&gt; your repository or modifying the &lt;code&gt;SourceRepository&lt;/code&gt; CRD&amp;rsquo;s &lt;code&gt;spec.scheduler.name&lt;/code&gt; in your development git repository or specifying a different default scheduler on the &lt;code&gt;dev environment.spec.teamSettings.defaultScheduler.name&lt;/code&gt; then the next time the prow configuration is generated (on &lt;code&gt;jx create quickstart / jx import / jx boot&lt;/code&gt; it&amp;rsquo;ll update the prow config to use your scheduler&lt;/p&gt;
&lt;p&gt;See also &lt;a href=&#34;https://jenkins-x.io/docs/resources/faq/using/chatops/#how-do-i-add-multiple-parallel-pipelines-to-a-project&#34;&gt;How do I add multiple parallel pipelines to a project?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-add-more-charts-to-jenkins-x&#34;&gt;How do I add more charts to Jenkins X?&lt;/h2&gt;
&lt;p&gt;It depends on which namespace you want the charts to be installed.&lt;/p&gt;
&lt;p&gt;If its in the development environment (the &lt;code&gt;jx&lt;/code&gt; namespace by default) then &lt;code&gt;env/requirements.yaml&lt;/code&gt; is where to add the chart and for a chart &lt;code&gt;foo&lt;/code&gt; you can add &lt;code&gt;env/foo/values.yaml&lt;/code&gt; to configure it. (or &lt;code&gt;env/foo/values.tmpl.yaml&lt;/code&gt; if you want to use some &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/how-it-works/#improvements-to-valuesyaml&#34;&gt;templating&lt;/a&gt; of the &lt;code&gt;values.yaml&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Though if you want our chart to be in another namespace then we use the convention of adding a folder in the &lt;code&gt;system&lt;/code&gt; directory in the boot configuration (e.g. like we do for ingress, cert manager, velero, service mesh etc). So make a new folder in &lt;code&gt;system&lt;/code&gt; and add the &lt;code&gt;jx step helm apply&lt;/code&gt; step in the pipeline in &lt;code&gt;jenkins-x.yml&lt;/code&gt; like we do for &lt;code&gt;cert-manager&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;velero&lt;/code&gt; etc.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-disable-the-ingress-controller&#34;&gt;How do I disable the ingress controller?&lt;/h2&gt;
&lt;p&gt;If you already have your own ingress controller and do not want &lt;code&gt;jx boot&lt;/code&gt; to install another one you can just delete the &lt;code&gt;install-nginx-controller&lt;/code&gt; step in your dev environment git repository. e.g. &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jenkins-x.yml#L85-L99&#34;&gt;remove this step&lt;/a&gt; from the &lt;code&gt;jenkins-x.yml&lt;/code&gt; in your dev environment git repository&lt;/p&gt;
&lt;h2 id=&#34;what-do-i-do-if-jx-boot-hangs-on-step-install-jenkins-x&#34;&gt;What do I do if &lt;code&gt;jx boot&lt;/code&gt; hangs on &lt;code&gt;step-install-jenkins-x&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;You may have a problem with Terminating a PVC that is protected.&lt;/p&gt;
&lt;p&gt;Describe your pvc.  In the case I saw, it was the jenkins pvc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl -n jx describe pvc jenkins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it&amp;rsquo;s stuck in Terminating and you see that the Finalizer has protection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Finalizers:    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubernetes.io/pvc-protection&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you can remove the protection by issuing the following command and your install should continue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl -n jx patch pvc jenkins -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;metadata&amp;#34;:{&amp;#34;finalizers&amp;#34;: []}}&amp;#39;&lt;/span&gt; --type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;merge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-debug-issues-with-terraform-and-jenkinsx&#34;&gt;How do I debug issues with terraform and JenkinsX?&lt;/h2&gt;
&lt;p&gt;Set the &lt;code&gt;TF_LOG&lt;/code&gt; environment variable to &lt;code&gt;TRACE&lt;/code&gt;, and then run your terraform commands such as &lt;code&gt;terraform apply&lt;/code&gt; or &lt;code&gt;terraform plan&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TF_LOG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;TRACE terraform apply
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the global &lt;code&gt;--verbose&lt;/code&gt; flag to add more verbosity to the JenkinsX logs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx boot --verbose
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-get-a-clean-terraform-destroy&#34;&gt;How to get a clean terraform destroy&lt;/h2&gt;
&lt;p&gt;The following steps need to be performed before a terraform destroy can be executed successfully for the EKS cluster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empty the s3 buckets created by jenkinsX (This is required if &lt;code&gt;force_destroy&lt;/code&gt; was set to false, when provisioning
the EKS cluster)&lt;/li&gt;
&lt;li&gt;Delete the Network load balancer (The load balancer is created outside terraform, so you need to delete it manually
in the EC2 console before executing a terraform destroy.
You can also import it to terraform, and then execute destroy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you do not delete the load balancer, you will have issues with detaching the internet gateway (IGW) and deleting it.
This can lead to a race condition where terraform tries to destroy the auto scaling group and the IGW, and eventually
times out.&lt;/p&gt;
&lt;h2 id=&#34;does-jenkins-x-install-a-load-balancer&#34;&gt;Does Jenkins X install a load balancer?&lt;/h2&gt;
&lt;p&gt;Jenkins X installs &lt;code&gt;nginx&lt;/code&gt; which has a &lt;code&gt;LoadBalancer&lt;/code&gt; kubernetes &lt;code&gt;Service&lt;/code&gt;. But the underlying kubernetes platform needs to implement the load balancing network and infrastructure. This comes OOTB on all public clouds.&lt;/p&gt;
&lt;p&gt;On-premises you need to install something like &lt;a href=&#34;https://metallb.universe.tf/&#34;&gt;MetalLB&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Configuration questions</title>
      <link>https://jenkins-x.io/docs/resources/faq/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/faq/config/</guid>
      <description>
        
        
        &lt;h2 id=&#34;how-do-i-add-a-user-to-my-jenkins-x-installation&#34;&gt;How do I add a user to my Jenkins X installation?&lt;/h2&gt;
&lt;p&gt;Jenkins X assumes each user has access to the same development kubernetes cluster that Jenkins X is running on.&lt;/p&gt;
&lt;p&gt;If your user does not have access to the kubernetes cluster we need to setup their &lt;code&gt;~/.kube/config&lt;/code&gt; file so that they can access it.&lt;/p&gt;
&lt;p&gt;If you are using Google&amp;rsquo;s GKE then you can browse the &lt;a href=&#34;https://console.cloud.google.com&#34;&gt;GKE Console&lt;/a&gt; to view all the clusters and click on the &lt;code&gt;Connect&lt;/code&gt; button next to your development cluster and then that lets you copy/paste the command to connect to the cluster.&lt;/p&gt;
&lt;p&gt;For other clusters we are planning on writing some &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/1406&#34;&gt;CLI commands to export and import the kube config&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;once-the-user-has-access-to-the-kubernetes-cluster&#34;&gt;Once the user has access to the kubernetes cluster&lt;/h3&gt;
&lt;p&gt;Once your user has access to the kubernetes cluster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-x.io/docs/getting-started/setup/install/&#34;&gt;install the jx binary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If Jenkins X was installed in the namespace &lt;code&gt;jx&lt;/code&gt; then the following should &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/developing/kube-context/&#34;&gt;switch your context&lt;/a&gt; to the &lt;code&gt;jx&lt;/code&gt; namespace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx ns jx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test you should be able to type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx get env
jx open
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view the environments and any development tools like the Jenkins or Nexus consoles.&lt;/p&gt;
&lt;h2 id=&#34;how-does-access-control-and-security-work&#34;&gt;How does access control and security work?&lt;/h2&gt;
&lt;p&gt;See the &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/access-control/&#34;&gt;access control documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-upgrade-the-jx-binary-used-inside-the-builds-when-using-serverless-jenkins&#34;&gt;How do I upgrade the jx binary used inside the builds when using serverless jenkins?&lt;/h2&gt;
&lt;p&gt;We use specific &lt;code&gt;BuildTemplates&lt;/code&gt; for different programming languages. These &lt;code&gt;BuildTemplates&lt;/code&gt; describe the steps that will be executed as part of the job, which in case of the Jenkins X BuildTemplates, they all execute the &lt;code&gt;JenkinsfileRunner&lt;/code&gt; to execute the project&amp;rsquo;s Jenkinsfile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl get buildtemplates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                        AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environment-apply           9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environment-build           9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-base                9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-csharp              9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-cwp                 9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-elixir              9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-filerunner          9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-go                  9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-go-nodocker         9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-go-script-bdd       1d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-go-script-ci        1d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-go-script-release   1d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-gradle              9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-javascript          9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-jenkins             9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-maven               9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-python              9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-rust                9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-scala               9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-test                9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knative-chart-ci            9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knative-chart-release       9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knative-deploy              9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knative-maven-ci            9d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knative-maven-release       9d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The docker image that has the &lt;code&gt;Jenkinsfile&lt;/code&gt; runner has also other tools installed, like the &lt;code&gt;jx&lt;/code&gt; binary. If you need to update jx to a newer version, you need to modify &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-serverless/blob/def939f559b6b0e6735c043ce032686397053a6e/Dockerfile.base#L120-L123&#34;&gt;the base Dockerfile used for the Jenkinsfile runner step of the BuildTemplate&lt;/a&gt;, so that it uses the jx version that you want. Althought &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-serverless/commits/def939f559b6b0e6735c043ce032686397053a6e/Dockerfile.base&#34;&gt;this is normally done automatically&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once this is done, you need to change the BuildTemplate in your cluster so that it starts using the new version of the docker image. For example, you can see the current version of this image for the Go BuildTemplate in your cluster&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl describe buildtemplate jenkins-go | grep Image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Image:       jenkinsxio/jenkins-go:256.0.44
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to use a different version that uses a newer jx version you could manually change all the BuildTemplates but instead let&amp;rsquo;s jx take care of it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade addon jx-build-templates
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check that the change has been done&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl describe buildtemplate jenkins-go | grep Image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Image:       jenkinsxio/jenkins-go:256.0.50
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-does---prow-differ-from---gitops&#34;&gt;How does &lt;code&gt;--prow&lt;/code&gt; differ from &lt;code&gt;--gitops&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--prow&lt;/code&gt; uses &lt;a href=&#34;https://jenkins-x.io/news/serverless-jenkins/&#34;&gt;serverless jenkins&lt;/a&gt; and uses &lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow&#34;&gt;prow&lt;/a&gt; to implement ChatOps on Pull Requests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--gitops&lt;/code&gt; is still work in progress but will use GitOps to manage the Jenkins X installation (the dev environment) so that the platform installation is all stored in a git repo and upgrading / adding Apps / changing config is all changed via Pull Requests like changes to promotion of applications to the Staging or Production environments&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-do-i-reuse-my-existing-ingress-controller&#34;&gt;How do I reuse my existing Ingress controller?&lt;/h2&gt;
&lt;p&gt;By default when you &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/install-on-cluster/&#34;&gt;install Jenkins X into an existing kubernetes cluster&lt;/a&gt; it prompts you if you want to install an Ingress controller. Jenkins X needs an Ingress controller of some kind so that we can setup &lt;code&gt;Ingress&lt;/code&gt; resources for each &lt;code&gt;Service&lt;/code&gt; so we can access web applications via URLs outside of the kubneretes cluster (e.g. inside web browsers).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx install&lt;/a&gt; command takes a number of CLI arguments starting with &lt;code&gt;--ingress&lt;/code&gt; where you can point to the namespace, deployment name and service name of the ingress controller you wish to use for the installation.&lt;/p&gt;
&lt;p&gt;We do recommend you use the default ingress controller if you can - as we know it works really well and only uses a single LoadBalancer IP for the whole cluster (your cloud provider often charges per IP address). However if you want to point at a different ingress controller just specify those arguments on install:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx install &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --ingress-service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;yoursvcname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --ingress-deployment&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;yourdeployname&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --ingress-namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;kube-system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-enable-https-urls&#34;&gt;How do I enable HTTPS URLs?&lt;/h2&gt;
&lt;p&gt;In general use the &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx upgrade ingress&lt;/a&gt; command.&lt;/p&gt;
&lt;p&gt;For more detail see these blogs posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://technologyconversations.com/2019/05/31/upgrading-ingress-rules-and-adding-tls-certificates-with-jenkins-x/&#34;&gt;Upgrading Ingress Rules And Adding TLS Certificates With Jenkins X&lt;/a&gt; by &lt;a href=&#34;https://technologyconversations.com&#34;&gt;Viktor Farcic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/jenkins-x-tls-enabled-previews-d04fa68c7ce9?source=friends_link&amp;amp;sk=c13828b223f56ed662fd7ec0872c3d1e&#34;&gt;Jenkins X — TLS enabled Previews&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sboardwell&#34;&gt;Steve Boardwell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/jenkins-x-securing-the-cluster-e1b9fcd8dd05?source=friends_link&amp;amp;sk=e1e46e780908b2e3c8415c3191e82c56&#34;&gt;Jenkins X — Securing the Cluster&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@sboardwell&#34;&gt;Steve Boardwell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-do-i-change-the-urls-in-an-environment&#34;&gt;How do I change the URLs in an environment?&lt;/h2&gt;
&lt;p&gt;We use &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;exposecontroller&lt;/a&gt; to automate the setup of &lt;code&gt;Ingress&lt;/code&gt; resources for exposed Services, enabling TLS and also injecting external URLs for services into code (e.g. so we can register webhooks).&lt;/p&gt;
&lt;p&gt;The default &lt;code&gt;UrlTemplate&lt;/code&gt; for each environment is of the form: &lt;code&gt;{{.Service}}.{{.Namespace}}.{{.Domain}}&lt;/code&gt; where &lt;code&gt;Service&lt;/code&gt; is the name of the service, &lt;code&gt;Namespace&lt;/code&gt; is the kubernetes namespace and &lt;code&gt;Domain&lt;/code&gt; is the configured DNS domain.&lt;/p&gt;
&lt;p&gt;If you want to modify the URL schemes of your service in an environment then edit the file &lt;code&gt;env/values.yaml&lt;/code&gt; in your Environments git repository. To find the URLs to each source repository use the &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_environments/&#34;&gt;jx get environments&lt;/a&gt; command.&lt;/p&gt;
&lt;p&gt;Then modify the contents of &lt;code&gt;env/values.yaml&lt;/code&gt; to include the &lt;code&gt;urlTemplate:&lt;/code&gt; value as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;expose&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;urltemplate&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{.Service}}-{{.Namespace}}.{{.Domain}}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve left out the other values of &lt;code&gt;expose:&lt;/code&gt; and &lt;code&gt;config:&lt;/code&gt; for brevity - the important thing is to ensure you specify a custom &lt;code&gt;expose.config.urltemplate&lt;/code&gt; value. The default is &lt;code&gt;{{.Service}}.{{.Namespace}}.{{.Domain}}&lt;/code&gt; if none is specified.&lt;/p&gt;
&lt;p&gt;Whenever you modify the git repository for an environment the GitOps pipeline will run to update your Ingress resources to match your &lt;code&gt;UrlTemplate&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Using Jenkins X</title>
      <link>https://jenkins-x.io/docs/resources/faq/using/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/faq/using/</guid>
      <description>
        
        
        &lt;h2 id=&#34;how-do-i-enable-bash-completion&#34;&gt;How do I enable bash completion?&lt;/h2&gt;
&lt;p&gt;Using bash completion really helps using the &lt;code&gt;jx&lt;/code&gt; command line letting you &lt;code&gt;TAB&lt;/code&gt;-complete commands and command line arguments.&lt;/p&gt;
&lt;p&gt;To see how to enable bash completion check out the &lt;a href=&#34;https://jenkins-x.io/commands/jx_completion/&#34;&gt;jx completion&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-inject-environment-specific-configuration&#34;&gt;How do I inject environment specific configuration?&lt;/h2&gt;
&lt;p&gt;Each environment in Jenkins X is defined in a git repository; we use GitOps to manage all changes in each environment such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding/removing apps&lt;/li&gt;
&lt;li&gt;changing the version of an app (up or down)&lt;/li&gt;
&lt;li&gt;configuring any app with environment specific values&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first two items are defined in the &lt;code&gt;env/requirements.yaml&lt;/code&gt;  file in the git repository for your environment. the latter is defined in the &lt;code&gt;env/values.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Helm charts use a &lt;a href=&#34;https://github.com/helm/helm/blob/master/docs/chart_template_guide/values_files.md&#34;&gt;values.yaml file&lt;/a&gt; so that you can override any configuration inside your Chart to modify settings such as labels or annotations on any resource or configurations of resources (e.g. &lt;code&gt;replicaCount&lt;/code&gt;) or to pass in things like environment variables into a &lt;code&gt;Deployment&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if you wish to change, say, the &lt;code&gt;replicaCount&lt;/code&gt; of an app &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;Staging&lt;/code&gt; then find the git repository for the &lt;code&gt;Staging&lt;/code&gt; environment via &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_environments/&#34;&gt;jx get env&lt;/a&gt; to find the git URL.&lt;/p&gt;
&lt;p&gt;Navigate to the &lt;code&gt;env/values.yaml&lt;/code&gt; file and add/edit a bit of YAML like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;foo&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;replicaCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Submit that change as a Pull Request so it can go through the CI tests and any peer review/approval required; then when its merged it master it will modify the &lt;code&gt;replicaCount&lt;/code&gt; of the &lt;code&gt;foo&lt;/code&gt; application (assuming there&amp;rsquo;s a chart called &lt;code&gt;foo&lt;/code&gt; in the &lt;code&gt;env/requirements.yaml&lt;/code&gt; file)&lt;/p&gt;
&lt;p&gt;You can use vanilla helm to do things like injecting the current namespace if you need that.&lt;/p&gt;
&lt;p&gt;To see a more complex example of how you can use a &lt;code&gt;values.yaml&lt;/code&gt; file to inject into charts, see how we use these files to &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/config/&#34;&gt;configure Jenkins X itself&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-inject-preview-specific-configuration&#34;&gt;How do I inject preview specific configuration?&lt;/h2&gt;
&lt;p&gt;See the &lt;a href=&#34;#how-do-i-inject-environment-specific-configuration&#34;&gt;above question on how to inject environment specific configuration into environments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Preview Environments are similar to other environments like &lt;code&gt;Staging&lt;/code&gt; and &lt;code&gt;Production&lt;/code&gt; only instead of storing the environments in a separate git repository the preview environment is defined inside each applications &lt;code&gt;charts/preview&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;So to inject any custom configuration into your Preview environment you can modify the &lt;code&gt;charts/preview/values.yaml&lt;/code&gt; file in your applications git repository to override any helm template parameters defined in your chart (in the &lt;code&gt;charts/myapp&lt;/code&gt; folder).&lt;/p&gt;
&lt;p&gt;You may need to modify your helm charts to add extra helm configuration if the configuration you wish to configure is not easily changed via the &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-manage-secrets-in-each-environment&#34;&gt;How do I manage secrets in each environment?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;Hashicorp Vault&lt;/a&gt; is the preferred way in Jenkins X to manage secrets. For example, the GitHub personal access token generated for the pipeline bot is stored in Vault. &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/vault/&#34;&gt;Read more about using Vault to manage your secrets with Jenkins X&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, the Jenkins X team are big fans of &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;Kubernetes External Secrets&lt;/a&gt; and are developing &lt;a href=&#34;https://github.com/jenkins-x/jx-secret&#34;&gt;jx-secret&lt;/a&gt;, a small command line tool working with Kubernetes External Secrets.&lt;/p&gt;
&lt;h2 id=&#34;when-do-preview-environments-get-removed&#34;&gt;When do Preview Environments get removed?&lt;/h2&gt;
&lt;p&gt;We have a background garbage collection job which removes Preview Environments after the Pull Request is closed/merged. You can run it any time you like via the &lt;a href=&#34;https://jenkins-x.io/commands/jx_gc_previews/&#34;&gt;jx gc previews&lt;/a&gt; command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gc previews
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also view the current previews via  &lt;a href=&#34;https://jenkins-x.io/commands/jx_get_previews/&#34;&gt;jx get previews&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get previews
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and delete a preview by choosing one to delete via &lt;a href=&#34;https://jenkins-x.io/commands/jx_delete_preview/&#34;&gt;jx delete preview&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx delete preview
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-add-other-services-into-a-preview&#34;&gt;How do I add other services into a Preview?&lt;/h2&gt;
&lt;p&gt;When you create a Pull Request by default Jenkins X creates a new &lt;a href=&#34;https://jenkins-x.io/about/concepts/features/#preview-environments&#34;&gt;Preview Environment&lt;/a&gt;. Since this is a new dynamic namespace you may want to configure additional microservices in the namespace so you can properly test your preview build.&lt;/p&gt;
&lt;p&gt;To find out more see &lt;a href=&#34;https://jenkins-x.io/docs/build-test-preview/preview/#adding-more-resources&#34;&gt;how to add dependent charts, services or configuration to your preview environment&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;can-i-use-my-existing-release-pipeline&#34;&gt;Can I use my existing release pipeline?&lt;/h2&gt;
&lt;p&gt;With Jenkins X you are free to create your own pipeline to do the release if you wish; though doing so means you miss out on our &lt;a href=&#34;https://jenkins-x.io/docs/contributing/addons/&#34;&gt;extension model&lt;/a&gt; which lets you easily enable various extension Apps like Governance, Compliance, code quality, code coverage, security scanning, vulnerability testing and various other extensions which are being added all the time through our community.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve specifically built this extension model to minimise the work your teams have in having to edit + maintain pipelines across many separate microservices; the idea is we&amp;rsquo;re trying to automate both the pipelines and the extensions to the pipelines so teams can focus on their actual code and less on the CI/CD plumbing which is pretty much all undifferentiated heavy lifting these days.&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-handle-custom-branches-with-tekton&#34;&gt;How can I handle custom branches with Tekton?&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t use &lt;code&gt;branch patterns&lt;/code&gt; with Tekton; they are a Jenkins specific configuration.&lt;/p&gt;
&lt;p&gt;For Tekton we use the &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/prow/&#34;&gt;prow&lt;/a&gt; / &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/lighthouse/&#34;&gt;lighthouse&lt;/a&gt; configuration to specify which branches trigger which pipeline contexts.&lt;/p&gt;
&lt;p&gt;If you are using &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;boot&lt;/a&gt; to install Jenkins X then you can create your own custom &lt;code&gt;Scheduler&lt;/code&gt; custom resource in &lt;code&gt;env/templates/myscheduler.yaml&lt;/code&gt; based on the &lt;a href=&#34;https://github.com/jenkins-x-charts/jxboot-resources/blob/master/jxboot-resources/templates/default-scheduler.yaml&#34;&gt;default one that is included&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;e.g. here is how we specify the &lt;a href=&#34;https://github.com/jenkins-x-charts/jxboot-resources/blob/master/jxboot-resources/templates/default-scheduler.yaml#L48&#34;&gt;branches used to create releases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also create additional pipeline contexts; e.g. here&amp;rsquo;s how we add multiple parallel testing pipelines on the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; via a &lt;a href=&#34;https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/templates/jx-versions-scheduler.yaml#L21&#34;&gt;custom Scheduler&lt;/a&gt; so that we can have many integration tests run in parallel on a single PR. Then each named context listed has an associated &lt;code&gt;jenkins-x-$context.yml&lt;/code&gt; file in the source repository to define the pipeline to run &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-versions/blob/master/jenkins-x-boot-lh.yml&#34;&gt;like this example which defines the &lt;code&gt;boot-lh&lt;/code&gt; context&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can then associate your &lt;code&gt;SourceRepository&lt;/code&gt; resources with your custom scheduler by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;specifying the scheduler name on the &lt;code&gt;spec.scheduler.name&lt;/code&gt; property of your &lt;code&gt;SourceRepository&lt;/code&gt; via &lt;code&gt;kubectl edit sr my-repo-name&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;specifying the scheduler name when you import a project via &lt;code&gt;jx import --scheduler myname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;specifying the default scheduler name in your &lt;code&gt;dev&lt;/code&gt; &lt;code&gt;Environment&lt;/code&gt; at &lt;code&gt;spec.teamSettings.defaultScheduler.name&lt;/code&gt; before you import projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are not using &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;boot&lt;/a&gt; then you can use &lt;code&gt;kubectl edit cm config&lt;/code&gt; and modify the prow configuration by hand - though we highly recommend using &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/&#34;&gt;boot&lt;/a&gt; and GitOps instead; the prow configuration is easy to break if changing it by hand.&lt;/p&gt;
&lt;h2 id=&#34;how-does-promotion-actually-work&#34;&gt;How does promotion actually work?&lt;/h2&gt;
&lt;p&gt;The kubernetes resources being deployed are defined as YAML files in the source code of your application in &lt;code&gt;charts/myapp/templates/*.yaml&lt;/code&gt;. If you don&amp;rsquo;t specify anything then Jenkins X creates default resources (a &lt;code&gt;Service + Deployment&lt;/code&gt;) but you are free to add any k8s resources as YAML into that folder (&lt;code&gt;PVCs, ConfigMaps, Services&lt;/code&gt;, etc).&lt;/p&gt;
&lt;p&gt;Then the Jenkins X release pipeline automatically tars up the YAML files into an immutable versioned tarball (using the same version number as the docker image, git tag and release notes) and deploys it into a chart repository of your choice (defaults to chartmuseum but you can easily switch that to cloud storage/nexus/whatever) so that the immutable release can be easily used by any promotion.&lt;/p&gt;
&lt;p&gt;Promotion in Jenkins X is completely separate to Release &amp;amp; we support promoting any releases if packaged as a helm chart. Promotion via &lt;a href=&#34;https://jenkins-x.io/docs/build-test-preview/promotion/&#34;&gt;jx promote&lt;/a&gt; CLI generates a Pull Request in the git repository for an environment (Staging, Canary, Production or whatever). This is GitOps basically - specifying which versions and configurations of which apps are in each environment using a git repository and configuration as code.&lt;/p&gt;
&lt;p&gt;The PR triggers a CI pipeline to verify the changes are valid (e.g. the helm chart exists and can be downloaded, the docker images exist etc). Whenever the PR gets merged (could be automatically or may require additional reviews/+1s/JIRA/ServiceNow tickets or whatever) - then another pipeline is triggered to apply the helm charts from the master branch to the destination k8s cluster and namespace.&lt;/p&gt;
&lt;p&gt;Jenkins X automates all of the above but given both these pipelines are defined in the environments git repository in a &lt;code&gt;Jenkinsfile&lt;/code&gt; you are free to customise to add your own pre/post steps if you wish. e.g. you could analyse the YAML to pre-provision PVs for any PVCs using some custom disk snapshot tool you may have.  Or you can do that in a pre or post-install helm hook job. Though we&amp;rsquo;d prefer these tools to be created as part of the Jenkins X &lt;a href=&#34;https://jenkins-x.io/docs/contributing/addons/&#34;&gt;extension model&lt;/a&gt; to avoid custom pipeline hacking which could break in future Jenkins X releases - though its not a huge biggie.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-change-the-owner-of-a-docker-image&#34;&gt;How do I change the owner of a docker image?&lt;/h2&gt;
&lt;p&gt;When using a docker registry like gcr.io then the docker image owner &lt;code&gt;gcr.io/owner/myname:1.2.3&lt;/code&gt; can be different to your git owner/organisation.&lt;/p&gt;
&lt;p&gt;On Google&amp;rsquo;s GCR this is usually your GCP Project ID; which you can have many different projects to group images together.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a few options for defining which docker registry owner to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;specify it in your &lt;code&gt;jenkins-x.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dockerRegistryHost&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gcr.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dockerRegistryOwner&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-gcr-project-id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;specify it in the &lt;a href=&#34;https://jenkins-x.io/docs/reference/components/custom-resources/&#34;&gt;Environment CRD&lt;/a&gt; called &lt;code&gt;dev&lt;/code&gt; at &lt;code&gt;env.spec.teamSettings.dockerRegistryOrg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;define the environment variable &lt;code&gt;DOCKER_REGISTRY_ORG&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If none of those are found then the code defaults to the git repository owner.&lt;/p&gt;
&lt;p&gt;For more details the code to resolve it is &lt;a href=&#34;https://github.com/jenkins-x/jx/blob/65962ff5ef1a6d1c4776daee0163434c9c2cb566/pkg/cmd/opts/docker.go#L14&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-if-my-team-does-not-want-to-use-helm&#34;&gt;What if my team does not want to use helm?&lt;/h2&gt;
&lt;p&gt;To help automate CI/CD with GitOps we assume helm charts are created as part of the automated project setup and CI/CD. e.g. just &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/creating/import/&#34;&gt;import your source code&lt;/a&gt; and a docker image + helm chart will be generated for you - the developers don&amp;rsquo;t need to know or care if they don&amp;rsquo;t want to use helm:&lt;/p&gt;
&lt;p&gt;If a developer wants to specifically create a specific resource (e.g. &lt;code&gt;Secret, ConfigMap&lt;/code&gt; etc) they can just hack the YAML directly in &lt;code&gt;charts/myapp/templates/*.yaml&lt;/code&gt;. Increasingly most IDEs now have UI wizards for creating + editing kubernetes resources.&lt;/p&gt;
&lt;p&gt;By default things like resource limits are put in &lt;code&gt;values.yaml&lt;/code&gt; so its easy to customise those as needed in different environments (requests/limits, liveness probe timeouts and the like).&lt;/p&gt;
&lt;p&gt;If you have a developer who is fundamentally opposed to helm&amp;rsquo;s configuration management solution for environment specific configuration you can just opt out of that and just use helm as a way to version and download immutable tarballs of YAML and just stick to vanilla YAML files in, say, &lt;code&gt;charts/myapp/templates/deployment.yaml&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then if you wish to use another configuration management tool you can add it in - e.g. &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/2302&#34;&gt;kustomise support&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-change-the-domain-of-serverless-apps&#34;&gt;How do I change the domain of serverless apps?&lt;/h2&gt;
&lt;p&gt;If you use &lt;a href=&#34;https://jenkins-x.io/docs/resources/tutorials/serverless-apps/&#34;&gt;serverless apps&lt;/a&gt; with Knative we don&amp;rsquo;t use thee default exposecontroller mechanism for defaulting the &lt;code&gt;Ingress&lt;/code&gt; resources since knative does not use kubernetes &lt;code&gt;Service&lt;/code&gt; resources.&lt;/p&gt;
&lt;p&gt;You can work around this by manually editing the &lt;em&gt;knative&lt;/em&gt; config via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl edit cm config-domain --namespace knative-serving
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more help see &lt;a href=&#34;https://knative.dev/docs/serving/using-a-custom-domain/&#34;&gt;using a custom domain with knative&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;can-i-reuse-exposecontroller-for-my-apps&#34;&gt;Can I reuse exposecontroller for my apps?&lt;/h2&gt;
&lt;p&gt;You should be able to use &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller/blob/master/README.md&#34;&gt;exposecontroller&lt;/a&gt; directly in any app you deploy in any environment (e.g. Staging or Production) as we already trigger exposecontroller on each new release.&lt;/p&gt;
&lt;p&gt;We use &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller/blob/master/README.md&#34;&gt;exposecontroller&lt;/a&gt; for Jenkins X to handle the generation of &lt;code&gt;Ingress&lt;/code&gt; resources so that we can support wildcard DNS on a domain or automate the setup of HTTPS/TLS along with injecting external endpoints into applications in ConfigMaps via &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller/blob/master/README.md#using-the-expose-url-in-other-resources&#34;&gt;annotations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller/blob/master/README.md&#34;&gt;exposecontroller&lt;/a&gt; to generate the &lt;code&gt;Ingress&lt;/code&gt; for a &lt;code&gt;Service&lt;/code&gt; just &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller/blob/master/README.md#label&#34;&gt;add the label to your Service&lt;/a&gt;. e.g. add this to your &lt;code&gt;charts/myapp/templates/service.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;myapp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fabric8.io/expose&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to inject the URL or host name of the external URL or your ingress just &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller/blob/master/README.md#using-the-expose-url-in-other-resources&#34;&gt;use these annotations&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-add-custom-annotations-to-ingress-controller&#34;&gt;How To Add Custom Annotations to Ingress Controller?&lt;/h2&gt;
&lt;p&gt;There may be times when you need to add your custom annotations to the ingress controller or &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;exposecontroller&lt;/a&gt; which &lt;code&gt;jx&lt;/code&gt; uses to expose services.&lt;/p&gt;
&lt;p&gt;You can add a list of annotations to your application&amp;rsquo;s service Helm Chart, which is found in your app&amp;rsquo;s code repository.&lt;/p&gt;
&lt;p&gt;A custom annotation may be added to the &lt;code&gt;charts/myapp/values.yaml&lt;/code&gt; and it may look as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Default values for node projects.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a YAML-formatted file.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Declare variables to be passed into your templates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;replicaCount&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;repository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;draft&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tag&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;pullPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;IfNotPresent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;node-app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterIP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;externalPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;internalPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fabric8.io/expose&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fabric8.io/ingress.annotations&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kubernetes.io/ingress.class: nginx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To see an example of where we add multiple annotations that the &lt;code&gt;exposecontroller&lt;/code&gt; adds to generated ingress rules, take a look at this &lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/blob/08a304ff03a3e19a8eb270888d320b4336237005/values.yaml#L655&#34;&gt;values.yaml&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-use-a-monorepo&#34;&gt;How can I use a monorepo?&lt;/h2&gt;
&lt;p&gt;If you have an existing monorepo you want to import into Jenkins X you can; just be aware that you&amp;rsquo;ll have to create and maintain your own pipelines for your monorepo. So just modify them &lt;code&gt;jenkins-x.yml&lt;/code&gt; file after you import your monorepo.&lt;/p&gt;
&lt;p&gt;See how to &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;add a custom step to your pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-inject-vault-secrets-into-stagingproductionpreview-environments&#34;&gt;How do I inject Vault secrets into staging/production/preview environments?&lt;/h2&gt;
&lt;h3 id=&#34;stagingproduction&#34;&gt;Staging/Production&lt;/h3&gt;
&lt;p&gt;By default, &lt;a href=&#34;https://jenkins-x.io/docs/install-setup/boot/secrets/&#34;&gt;enabling Vault&lt;/a&gt; via &lt;code&gt;jx boot&lt;/code&gt;&amp;rsquo;s &lt;code&gt;jx-requirements.yml&lt;/code&gt; will only activate it in your pipeline and preview environments, not in staging and production. To also activate it in those environments, simply add a &lt;code&gt;jx-requirements.yml&lt;/code&gt; file to the root of their repo, with at least the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;secretStorage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;vault&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the file &lt;strong&gt;must&lt;/strong&gt; be named with &lt;code&gt;.yml&lt;/code&gt;, not &lt;code&gt;.yaml&lt;/code&gt;, or else the requirements loader cannot load the proper file.&lt;/p&gt;
&lt;p&gt;Then, assuming you have a secret in Vault with path &lt;code&gt;secret/path/to/mysecret&lt;/code&gt; containing key &lt;code&gt;password&lt;/code&gt;, you can inject it into service &lt;code&gt;myapp&lt;/code&gt; (for instance, as a &lt;code&gt;PASSWORD&lt;/code&gt; environment variable) by adding the following to your staging repo&amp;rsquo;s &lt;code&gt;/env/values.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;myapp&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;vault:path/to/mysecret:password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the prefixing with &lt;code&gt;vault:&lt;/code&gt; URL scheme and also that we omit first path component (&lt;code&gt;secret/&lt;/code&gt;), as it gets added automatically. Finally, the key name is separated from path by a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If your secret is not environment-specific, you can also inject it directly into your app&amp;rsquo;s &lt;code&gt;/charts/myapp/values.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;vault:path/to/mysecret:password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, note that this value would be overriden at the environment level if the same key is also present there.&lt;/p&gt;
&lt;h3 id=&#34;preview&#34;&gt;Preview&lt;/h3&gt;
&lt;p&gt;Vault does not need to be explicitly enabled for preview environment. To inject same secret as above into your preview, simply add the following to your app&amp;rsquo;s &lt;code&gt;/charts/preview/values.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;preview&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;vault:path/to/mysecret:password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-do-i-inject-a-vault-secret-via-a-kubernetes-secret&#34;&gt;How do I inject a Vault secret via a Kubernetes Secret?&lt;/h2&gt;
&lt;p&gt;When you inject secrets directly into environment variables, they appear in Deployment yaml as plain text, which is not advisable. It is recommended to rather inject them into a Secret yaml that will itself be mounted as environment variables.&lt;/p&gt;
&lt;p&gt;For example, start by injecting the secret into your staging repo&amp;rsquo;s &lt;code&gt;/env/values.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;myapp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;mysecrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;vault:path/to/mysecret:password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, in your app&amp;rsquo;s &lt;code&gt;/charts/myapp/templates&lt;/code&gt;, create a &lt;code&gt;mysecrets.yaml&lt;/code&gt; file, in which you refer to the secret you just added:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecrets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;PASSWORD&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;.Values.mysecrets.password | b64enc }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how we encode the secret value in Base64, as this is the format expected in a Secret yaml.&lt;/p&gt;
&lt;p&gt;Also, make sure to add a default value for the same key in your app&amp;rsquo;s &lt;code&gt;/charts/myapp/values.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;mysecrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That allows Helm to resolve to some value during linting of your &lt;code&gt;mysecrets.yaml&lt;/code&gt;, as linting seems not to consider values from the environment. Otherwise, you might get something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error: failed to build dependencies &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; chart from directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;: failed to lint the chart &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;: failed to run &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;helm lint --values values.yaml&amp;#39;&lt;/span&gt; command in directory &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, output: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&amp;gt; Linting .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; templates/: render error in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myapp/templates/secrets.yaml&amp;#34;&lt;/span&gt;: template: myapp/templates/secrets.yaml:6:21: executing &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myapp/templates/secrets.yaml&amp;#34;&lt;/span&gt; at &amp;lt;.Values.mysecrets.password&amp;gt;: nil pointer evaluating interface &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;.password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, mount the Secret yaml as environment variables in your app&amp;rsquo;s &lt;code&gt;/charts/myapp/templates/deployment.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;.Chart.Name }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;envFrom&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;secretRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysecrets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Common Problems</title>
      <link>https://jenkins-x.io/docs/resources/faq/issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/docs/resources/faq/issues/</guid>
      <description>
        
        
        &lt;p&gt;We have tried to collate common issues here with work arounds. If your issue isn&amp;rsquo;t listed here please &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;let us know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;jenkins-x-does-not-startup&#34;&gt;Jenkins X does not startup&lt;/h2&gt;
&lt;p&gt;If your install fails to start there could be a few different reasons why the Jenkins X pods don&amp;rsquo;t start.&lt;/p&gt;
&lt;p&gt;Your cluster could be out of resources. You can check the spare resources on your cluster via &lt;a href=&#34;https://jenkins-x.io/commands/jx_status/&#34;&gt;jx status&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also have a diagnostic command that looks for common problems &lt;a href=&#34;https://jenkins-x.io/commands/jx_step_verify_install/&#34;&gt;jx step verify install&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx step verify install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A common issue for pods not starting is if your cluster does not have a &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;default storage class&lt;/a&gt; setup so that &lt;code&gt;Persistent Volume Claims&lt;/code&gt; can be bound to &lt;code&gt;Persistent Volumes&lt;/code&gt; as described in the &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/install-on-cluster/&#34;&gt;install instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check your storage class and persistent volume setup via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pvc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If things are working you should see something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl get pvc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                        STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins                     Bound     pvc-680b39b5-94f1-11e8-b93d-42010a840238   30Gi       RWO            standard       12h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-x-chartmuseum       Bound     pvc-6808fb5e-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-x-docker-registry   Bound     pvc-680a415c-94f1-11e8-b93d-42010a840238   100Gi      RWO            standard       12h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-x-mongodb           Bound     pvc-680d6fd9-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-x-nexus             Bound     pvc-680fc692-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you see &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;Pending&lt;/code&gt; then this indicates that you have no &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;default storage class&lt;/a&gt; setup on your kubnernetes cluster or you have ran out of persistent volume space.&lt;/p&gt;
&lt;p&gt;Please try create a &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34;&gt;default storage class&lt;/a&gt; for your cluster or contact your operations team or cloud provider.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;Persistent Volume Claims&lt;/code&gt; are all &lt;code&gt;Bound&lt;/code&gt; and things still have not started then try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pod
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a pod cannot start try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl describe pod some-pod-name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe that gives you a clue. Is it RBAC related maybe?&lt;/p&gt;
&lt;p&gt;If you are still stuck try &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;create an issue&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;http-server-gave-http-response-to-https-client&#34;&gt;http: server gave HTTP response to HTTPS client&lt;/h2&gt;
&lt;p&gt;If your pipeline fails with something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The push refers to a repository &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;100.71.203.90:5000/lgil3/jx-test-app&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-07-09T21:18:31Z&amp;#34;&lt;/span&gt; level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fatal msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;build step: pushing [100.71.203.90:5000/lgil3/jx-test-app:0.0.2]: Get https://100.71.203.90:5000/v1/_ping: http: server gave HTTP response to HTTPS client&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then this means that you are using the internal docker registry inside Jenkins X for your images but your kubernetes cluster&amp;rsquo;s docker daemons has not been configured for &lt;code&gt;insecure-registries&lt;/code&gt; so that you can use &lt;code&gt;http&lt;/code&gt; to talk to the docker registry service &lt;code&gt;jenkins-x-docker-registry&lt;/code&gt; in your cluster.&lt;/p&gt;
&lt;p&gt;By default docker wants all docker registries to be exposed over &lt;code&gt;https&lt;/code&gt; and to use TLS and certificates. This should be done for all public docker registries. However when using Jenkins X with an internal local docker registry this is hard since its not available at a public DNS name and doesn&amp;rsquo;t have HTTPS or certificates; so we default to requiring &lt;code&gt;insecure-registry&lt;/code&gt; be configured on all the docker daemons for your kubernetes worker nodes.&lt;/p&gt;
&lt;p&gt;We try to automate this setting when using &lt;code&gt;jx create cluster&lt;/code&gt;  e.g. on AWS we default this value to the IP range &lt;code&gt;100.64.0.0/10&lt;/code&gt; to match most kubernetes service IP addresses.&lt;/p&gt;
&lt;p&gt;On &lt;a href=&#34;https://jenkins-x.io/commands/jx_create_cluster_eks/&#34;&gt;EKS&lt;/a&gt; we default to using ECR to avoid this issue. Similarly we will soon default to GCR and ACR on GKE and AKS respectively.&lt;/p&gt;
&lt;p&gt;So a workaround is to use a real &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/docker-registry/&#34;&gt;external docker registry&lt;/a&gt; or enable &lt;code&gt;insecure-registry&lt;/code&gt; on your docker daemons on your compute nodes on your Kubernetes cluster.&lt;/p&gt;
&lt;h2 id=&#34;helm-fails-with-error-upgrade-failed-incompatible-versions-client-server&#34;&gt;Helm fails with Error: UPGRADE FAILED: incompatible versions client[&amp;hellip;] server[&amp;hellip;]&#39;&lt;/h2&gt;
&lt;p&gt;Generally speaking this happens when your laptop has a different version of helm to the version used in our build pack docker images and/or the version of tiller thats running in your server.&lt;/p&gt;
&lt;p&gt;The simplest fix for this is to just &lt;a href=&#34;https://jenkins-x.io/blog/2018/10/03/helm-without-tiller/&#34;&gt;not use tiller at all&lt;/a&gt; - which actually helps avoid this problem ever happening and solves a raft of security issues too.&lt;/p&gt;
&lt;p&gt;However switching from using Tiller to No Tiller does require a re-install of Jenkins X (though you could try do that in separate set of namespaces then move projects across incrementally?).&lt;/p&gt;
&lt;p&gt;The manual workaround is to install the &lt;a href=&#34;https://github.com/helm/helm/releases&#34;&gt;exact same version of helm as used on the server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or you can try switch tiller to match your client version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;helm init --upgrade&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though as soon as a pipeline runs it&amp;rsquo;ll switch the tiller version again so you&amp;rsquo;ll have to keep repeating the above.&lt;/p&gt;
&lt;h2 id=&#34;error-creating-jenkins-credential-jenkins-x-chartmuseum-500-server-error&#34;&gt;error creating jenkins credential jenkins-x-chartmuseum 500 Server Error&lt;/h2&gt;
&lt;p&gt;This is a &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/1234&#34;&gt;pending issue&lt;/a&gt; which we will hopefully fix soon.&lt;/p&gt;
&lt;p&gt;It basically happens if you have an old API token in &lt;code&gt;~/.jx/jenkinsAuth.yaml&lt;/code&gt; for your jenkins server URL. You can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remove it from that file by hand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run the following command &lt;a href=&#34;https://jenkins-x.io/commands/deprecation/&#34;&gt;jx delete jenkins token&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;jx delete jenkins token admin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;errors-with-chartmuseumbuildcdjenkins-xio&#34;&gt;errors with chartmuseum.build.cd.jenkins-x.io&lt;/h2&gt;
&lt;p&gt;If you see errors like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error:failed to add the repository &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jenkins-x&amp;#39;&lt;/span&gt; with URL &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://chartmuseum.build.cd.jenkins-x.io&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Looks like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://chartmuseum.build.cd.jenkins-x.io&amp;#34;&lt;/span&gt; is not a valid chart repository or cannot be reached
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then it looks like you have a reference to an old chart museum URL for Jenkins X charts.&lt;/p&gt;
&lt;p&gt;The new URL is: &lt;a href=&#34;http://chartmuseum.jenkins-x.io&#34;&gt;http://chartmuseum.jenkins-x.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It could be your helm install has an old repository URL installed. You should see&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME     	URL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stable   	https://kubernetes-charts.storage.googleapis.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-x	http://chartmuseum.jenkins-x.io
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you see this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm repo list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME     	URL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jenkins-x	https://chartmuseum.build.cd.jenkins-x.io
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then please run&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo remove jenkins-x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add jenkins-x	http://chartmuseum.jenkins-x.io
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and you should be good to go again.&lt;/p&gt;
&lt;p&gt;Another possible cause is an old URL in your environment&amp;rsquo;s git repository may have old references to the URL.&lt;/p&gt;
&lt;p&gt;So open your &lt;code&gt;env/requirements.yaml&lt;/code&gt; in your staging/production git repositories and modify them to use the URL &lt;a href=&#34;http://chartmuseum.jenkins-x.io&#34;&gt;http://chartmuseum.jenkins-x.io&lt;/a&gt; instead of &lt;strong&gt;chartmuseum.build.cd.jenkins-x.io&lt;/strong&gt; like this &lt;a href=&#34;https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml&#34;&gt;env/requirements file&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-errors-post-401-bad-credentials&#34;&gt;git errors: POST 401 Bad credentials&lt;/h2&gt;
&lt;p&gt;This indicates your git API token either was input incorrectly or has been regenerated and is now incorrect.&lt;/p&gt;
&lt;p&gt;To recreate it with a new API token value try the following (changing the git server name to match your git provider):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx delete git token -n github &amp;lt;yourUserName&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create git token -n github &amp;lt;yourUserName&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;invalid-git-token-to-scan-a-project&#34;&gt;Invalid git token to scan a project&lt;/h2&gt;
&lt;p&gt;If you get an error in Jenkins when it tries to scan your repositories for branches something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hudson.AbortException: Invalid scan credentials *****/****** &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;API Token &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; acccessing https://github.com git service inside pipelines&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; to connect to https://api.github.com, skipping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then your git API token was probably wrong or has expired.&lt;/p&gt;
&lt;p&gt;To recreate it with a new API token value try the following (changing the git server name to match your git provider):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx delete git token -n GitHub admin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx create git token -n GitHub admin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what-are-the-credentials-to-access-core-services&#34;&gt;What are the credentials to access core services?&lt;/h2&gt;
&lt;p&gt;Authenticated core services of Jenkins X include Jenkins, Nexus, ChartMuseum.  The default username is &lt;code&gt;admin&lt;/code&gt;and the password by default is generated and printed out in the terminal after &lt;code&gt;jx create cluster&lt;/code&gt; or &lt;code&gt;jx install&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;set-admin-username-and-password-values-for-core-services&#34;&gt;Set Admin Username and Password values for Core Services&lt;/h3&gt;
&lt;p&gt;You can also set the admin username via the &lt;code&gt;--default-admin-username=username&lt;/code&gt; flag.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;Perhaps you are using the  Active Directory security realm in Jenkins.  It is in this scenario that setting the Admin Username via the &lt;code&gt;--default-admin-username&lt;/code&gt; based on your existing service accounts makes sense.&lt;/p&gt;
&lt;p&gt;You may also pass this value via the &lt;code&gt;myvalues.yaml&lt;/code&gt;.&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;If you would like to set the default password yourself then you can set the flag &lt;code&gt;--default-admin-password=foo&lt;/code&gt; to the two comamnds above.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have the terminal console output anymore you can look in the local file &lt;code&gt;~/.jx/jenkinsAuth.yaml&lt;/code&gt; and find the password that matches your Jenkins server URL for the desired cluster.&lt;/p&gt;
&lt;h2 id=&#34;persistent-volume-claims-do-not-bind&#34;&gt;Persistent Volume Claims do not bind&lt;/h2&gt;
&lt;p&gt;If you notice that the persistent volume claims created when installing Jenkins X don&amp;rsquo;t bind with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pvc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The you should check that you have a cluster default storage class for dynamic persistent volume provisioning.  See &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&#34;i-cannot-connect-to-nodes-on-aws&#34;&gt;I cannot connect to nodes on AWS&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t see any valid nodes returned by &lt;code&gt;kubectl get node&lt;/code&gt; or you get errors running &lt;code&gt;jx status&lt;/code&gt; something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unable to connect to the server: dial tcp: lookup abc.def.regino.eks.amazonaws.com on 10.0.0.2:53: no such host
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;it could be your kube config is stale. Try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws eks --region &amp;lt;CLUSTER_REGION&amp;gt; update-kubeconfig --name &amp;lt;CLUSTER_NAME&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That should regenerate your local &lt;code&gt;~/kube/config&lt;/code&gt; file and so &lt;code&gt;kubectl get node&lt;/code&gt; or &lt;code&gt;jx status&lt;/code&gt; should find your nodes&lt;/p&gt;
&lt;h2 id=&#34;how-can-i-diagnose-exposecontroller-issues&#34;&gt;How can I diagnose exposecontroller issues?&lt;/h2&gt;
&lt;p&gt;When you promote a new version of your application to an environment, such as the Staging Environment a Pull Request is raised on the environment repository.&lt;/p&gt;
&lt;p&gt;When the master pipeline runs on an environment a Kubernetes &lt;code&gt;Job&lt;/code&gt; is created for &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;exposecontroller&lt;/a&gt; which runs a pod until it terminates.&lt;/p&gt;
&lt;p&gt;It can be tricky finding the log for temporary jobs since the pod is removed.&lt;/p&gt;
&lt;p&gt;One way to diagnose logs in your, say, Staging environment is to &lt;a href=&#34;https://github.com/boz/kail&#34;&gt;download and install kail&lt;/a&gt; and add it to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kail -l job-name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;expose -n jx-staging
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you then promote to the Staging environment or retrigger the pipeline on the &lt;code&gt;master&lt;/code&gt; branch of your Staging git repository (e.g. via &lt;a href=&#34;https://jenkins-x.io/commands/jx_start_pipeline/&#34;&gt;jx start pipeline&lt;/a&gt;) then you should see the output of the &lt;a href=&#34;https://github.com/jenkins-x/exposecontroller&#34;&gt;exposecontroller&lt;/a&gt; pod.&lt;/p&gt;
&lt;h2 id=&#34;why-is-promotion-really-slow&#34;&gt;Why is promotion really slow?&lt;/h2&gt;
&lt;p&gt;If you find you get lots of warnings in your pipelines like this&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to query the Pull Request last commit status for https://github.com/myorg/environment-mycluster-staging/pull/1 ref xyz Could not find a status for repository myorg/environment-mycluster-staging with ref xyz
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and promotion takes 30 minutes from a release pipeline on an application starting to the change hitting &lt;code&gt;Staging&lt;/code&gt; then its mostly probably due to Webhooks.&lt;/p&gt;
&lt;p&gt;When we &lt;a href=&#34;https://jenkins-x.io/docs/resources/guides/using-jx/creating/import/&#34;&gt;import projects&lt;/a&gt; or &lt;a href=&#34;https://jenkins-x.io/docs/getting-started/first-project/create-quickstart/&#34;&gt;create quickstarts&lt;/a&gt; we automate the setup of CI/CD pipelines for the git repository. What this does is setup Webhooks on the git repository to trigger Jenkins X to trigger pipelines (either using Prow for &lt;a href=&#34;https://jenkins-x.io/about/concepts/jenkins-x-pipelines/&#34;&gt;serverless Jenkins X Pipelines&lt;/a&gt; or the static jenkins server if not).&lt;/p&gt;
&lt;p&gt;However sometimes your git provider (e.g. &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; may not be able to do connect to your Jenkins X installation (e.g. due to networking / firewall issues).&lt;/p&gt;
&lt;p&gt;The easiest way to diagnose this is opening the git repository (e.g. for your environment repository).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx get env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;click on the generated URL for, say, your &lt;code&gt;Staging&lt;/code&gt;  git repository&lt;/li&gt;
&lt;li&gt;click the &lt;code&gt;Settings&lt;/code&gt; icon&lt;/li&gt;
&lt;li&gt;select the &lt;code&gt;Webhooks&lt;/code&gt; tab on the left&lt;/li&gt;
&lt;li&gt;select your Jenkins X webhook URL&lt;/li&gt;
&lt;li&gt;view the last webhook - did it succeed? Try re-trigger it? That should highlight any network issues etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you cannot use public webhooks you could look at something like &lt;a href=&#34;http://www.ultrahook.com/&#34;&gt;ultrahook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-see-the-log-of-exposecontroller&#34;&gt;How do I see the log of exposecontroller?&lt;/h2&gt;
&lt;p&gt;Usually we run the &lt;a href=&#34;&#34;&gt;exposecontroller&lt;/a&gt; as a post install &lt;code&gt;Job&lt;/code&gt; when we perform promotion to &lt;code&gt;Staging&lt;/code&gt; or &lt;code&gt;Production&lt;/code&gt; to expose services over Ingress and possibly inject external URLs into applications configuration.&lt;/p&gt;
&lt;p&gt;So the &lt;code&gt;Job&lt;/code&gt; will trigger a short lived &lt;code&gt;Pod&lt;/code&gt; to run in the namespace of your environment, then the pod will be deleted.&lt;/p&gt;
&lt;p&gt;If you want to view the logs of the &lt;code&gt;exposecontroller&lt;/code&gt; you will need to watch for the logs using a selector then trigger the promotion pipeline to capture it.&lt;/p&gt;
&lt;p&gt;One way to do that is via the &lt;a href=&#34;https://github.com/boz/kail&#34;&gt;kail&lt;/a&gt; CLI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kail -l  job-name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;expose
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will watch for exposecontroller logs and then dump them to the console. Now trigger a promotion pipeline and you should see the output within a minute or so.&lt;/p&gt;
&lt;h2 id=&#34;cannot-create-tls-certificates-during-ingress-setup&#34;&gt;Cannot create TLS certificates during Ingress setup&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.cert-manager.io/en/latest/index.html&#34;&gt;cert-manager&lt;/a&gt; cert-manager is a seperate project from &lt;em&gt;Jenkins X&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Newly created GKE clusters or existing cluster running &lt;em&gt;kubernetes&lt;/em&gt; &lt;strong&gt;v1.12&lt;/strong&gt; or older will encounter the following error when configuring Ingress with site-wide TLS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TLS certificates to be issued...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Timeout reached &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; TLS certificates to be ready
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This issue is caused by the &lt;em&gt;cert-manager&lt;/em&gt; pod not having the &lt;code&gt;disable-validation&lt;/code&gt; label set, which is a known cert-manager issue which is &lt;a href=&#34;https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html&#34;&gt;documented on their website&lt;/a&gt;. The following steps, taken from the &lt;a href=&#34;https://docs.cert-manager.io/en/latest/getting-started/troubleshooting.html#troubleshooting-installation&#34;&gt;cert-manager/troubleshooting-installation&lt;/a&gt; webpage, should resolve the issue:&lt;/p&gt;
&lt;p&gt;Check if the &lt;em&gt;disable-validation&lt;/em&gt; label exists on the &lt;em&gt;cert-manager&lt;/em&gt; pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl describe namespace cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you cannot see the &lt;code&gt;certmanager.k8s.io/disable-validation=true&lt;/code&gt; label on your namespace, you should add it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl label namespace cert-manager certmanager.k8s.io/disable-validation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Confirm the label has been added to the &lt;em&gt;cert-manager&lt;/em&gt; pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl describe namespace cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name:         cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Labels:       certmanager.k8s.io/disable-validation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Annotations:  &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Status:       Active
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now rerun &lt;em&gt;jx&lt;/em&gt; Ingress setup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade ingress
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While the ingress command is running, you can tail the &lt;em&gt;cert-manager&lt;/em&gt; logs in another terminal and see what is happening. You will need to find the name of your &lt;em&gt;cert-manager&lt;/em&gt; pod using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get pods --namespace cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then tail the logs of the &lt;em&gt;cert-manager&lt;/em&gt; pod.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl logs YOUR_CERT_MNG_POD --namespace cert-manager -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your TLS certificates should now be set up and working, otherwise checkout the &lt;a href=&#34;https://docs.cert-manager.io/en/latest/getting-started/troubleshooting.html&#34;&gt;official &lt;em&gt;cert-manager&lt;/em&gt; troubleshooting&lt;/a&gt; instructions.&lt;/p&gt;
&lt;h2 id=&#34;recreating-a-cluster-with-the-same-name&#34;&gt;Recreating a cluster with the same name&lt;/h2&gt;
&lt;p&gt;If you want to destroy a cluster that was created with boot and recreate it with the exact same name, there is some clean that needs to be done first.&lt;/p&gt;
&lt;p&gt;Make sure you uninstall jx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx uninstall
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Delete the cluster either from the web console or terminal by using the Kubernetes provider CLI command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud container clusters delete &amp;lt;cluster-name&amp;gt; --zone &amp;lt;cluster-zone&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After you have successfully done this, remove the &lt;code&gt;~/.jx&lt;/code&gt; and &lt;code&gt;~/.kube&lt;/code&gt; directories:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf ~/.jx ~/.kube
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Delete any repositories created by &lt;code&gt;jx&lt;/code&gt; on your Github organisations account.&lt;/p&gt;
&lt;p&gt;Delete the local git &lt;code&gt;jenkins-x-boot-config&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;That should leave your Kubernetes provider and your local environment in a clean state.&lt;/p&gt;
&lt;h2 id=&#34;no-external-ip-assigned-to-the-ingress-in-eks&#34;&gt;No External IP assigned to the ingress in EKS&lt;/h2&gt;
&lt;p&gt;If you have never created an Elastic Load Balancer (ELB) in AWS, then the &lt;code&gt;jx boot&lt;/code&gt; command will fail to assign an ip to the ingress controller.&lt;/p&gt;
&lt;p&gt;In this case, the output from &lt;code&gt;jx boot&lt;/code&gt; might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error: failed to discover the Ingress domain: getting a domain &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ingress service kube-system/jxing-nginx-ingress-controller: Timed out after 5m0s, last error: %!s&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;nil&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify this is the case, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get svc --all-namespaces
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you see &lt;code&gt;pending&lt;/code&gt; for external IP for &lt;code&gt;jxing-nginx-ingress-controller&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAMESPACE     NAME                                  TYPE           CLUSTER-IP      EXTERNAL-IP   PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                      AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system   jxing-nginx-ingress-controller        LoadBalancer   X.X.X.X         &amp;lt;pending&amp;gt;     80:32632/TCP,443:32036/TCP   4h45m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then create an ELB manually outside of EKS, and tear it down.&lt;/p&gt;
&lt;p&gt;After that, run &lt;code&gt;jx boot&lt;/code&gt; again.&lt;/p&gt;
&lt;h2 id=&#34;other-issues&#34;&gt;Other issues&lt;/h2&gt;
&lt;p&gt;Please &lt;a href=&#34;https://github.com/jenkins-x/jx/issues/new&#34;&gt;let us know&lt;/a&gt; and see if we can help? Good luck!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
