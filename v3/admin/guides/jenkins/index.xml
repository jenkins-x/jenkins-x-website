<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes – Jenkins</title>
    <link>https://jenkins-x.io/v3/admin/guides/jenkins/</link>
    <description>Recent content in Jenkins on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/admin/guides/jenkins/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: Getting Started</title>
      <link>https://jenkins-x.io/v3/admin/guides/jenkins/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/jenkins/getting-started/</guid>
      <description>
        
        
        &lt;p&gt;Make sure you have got the &lt;a href=&#34;https://jenkins-x.io/v3/guides/jx3/&#34;&gt;jx 3.x binary&lt;/a&gt; and you have installed &lt;a href=&#34;https://jenkins-x.io/v3/admin/platform/&#34;&gt;version 3&lt;/a&gt; before proceeding.&lt;/p&gt;
&lt;h2 id=&#34;adding-jenkins-servers-into-jenkins-x&#34;&gt;Adding Jenkins Servers into Jenkins X&lt;/h2&gt;
&lt;p&gt;You can use Jenkins X to install one or more Jenkins servers by running the following command in a git clone of your dev cluster git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops jenkins add --name myjenkins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That will add a new &lt;code&gt;helmfile/myjenkins/helmfile.yaml&lt;/code&gt; file for the jenkins charts along with &lt;code&gt;helmfile/myjenkins/values.yaml&lt;/code&gt; file that can be used to configure the &lt;a href=&#34;https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/VALUES_SUMMARY.md&#34;&gt;jenkins helm chart configuration values&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now git commit that file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fix: added new jenkins service&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;importing-projects-or-creating-quickstarts&#34;&gt;Importing projects or creating quickstarts&lt;/h3&gt;
&lt;p&gt;If you want to import repositories into your jenkins server or create quickstarts using &lt;code&gt;Jenkinsfile&lt;/code&gt; files then follow the usual &lt;a href=&#34;https://jenkins-x.io/v3/develop/create-project/&#34;&gt;user guide approach of creating projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your new jenkins server will be added to the &lt;code&gt;.jx/gitops/source-config.yaml&lt;/code&gt; file and so will be available to developers as a Jenkins server that can be used when importing projects.&lt;/p&gt;
&lt;h3 id=&#34;configure-jenkins&#34;&gt;Configure Jenkins&lt;/h3&gt;
&lt;p&gt;To configure your Jenkins server edit the &lt;code&gt;helmfile/myjenkins/values.yaml&lt;/code&gt; according to the &lt;a href=&#34;https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/VALUES_SUMMARY.md&#34;&gt;configuration guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each Jenkins server has its own namespace so that its possible to use fine grained role based access for each server using Kubernetes RBAC.&lt;/p&gt;
&lt;p&gt;In addition by default each Jenkins server gets to share the pipeline git user name and token so that it can access private git repositories in the same way as tekton pipelines.&lt;/p&gt;
&lt;h3 id=&#34;job-dsl&#34;&gt;Job DSL&lt;/h3&gt;
&lt;p&gt;When you import projects or create quickstarts with the above approach, your projects get added to the jenkins server you choose in  &lt;code&gt;.jx/gitops/source-config.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then during the &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;boot job&lt;/a&gt; Jenkins X will create a &lt;a href=&#34;https://plugins.jenkins.io/job-dsl/&#34;&gt;Jenkins Job DSL script&lt;/a&gt; for each project in your &lt;code&gt;.jx/gitops/source-config.yaml&lt;/code&gt; file for each Jenkins server.&lt;/p&gt;
&lt;p&gt;The Job DSL scripts are generated in the file &lt;code&gt;helmfiles/myjenkins/job-values.yaml&lt;/code&gt; which is then passed into the &lt;a href=&#34;https://github.com/jenkinsci/helm-charts&#34;&gt;Jenkins helm chart&lt;/a&gt; via the &lt;code&gt;values:&lt;/code&gt; item in the &lt;code&gt;helmfiles/myjenkins/helmfile.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By default the boot job uses &lt;a href=&#34;https://github.com/jenkins-x/jx3-versions/tree/master/jenkins/templates&#34;&gt;these templates for the Job DSL&lt;/a&gt; for folders (e.g. organisations) and for repositories.&lt;/p&gt;
&lt;p&gt;You can configure which templates you wish to use in the &lt;code&gt;.jx/gitops/source-config.yaml&lt;/code&gt; file; either globally or on a per organsation or repository basis. Please refer to the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SourceConfig&#34;&gt;SourceConfig&lt;/a&gt; reference guide. In particularly see how you can specify &lt;code&gt;jenkinsFolderTemplate&lt;/code&gt; or &lt;code&gt;jenkinsJobTemplate&lt;/code&gt; values at the global, organisation or repository level inside the &lt;a href=&#34;https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.JenkinsServer&#34;&gt;jenkinsServer&lt;/a&gt; entry.&lt;/p&gt;
&lt;h3 id=&#34;accessing-the-jenkins-server&#34;&gt;Accessing the Jenkins server&lt;/h3&gt;
&lt;p&gt;You can switch to the jenkins namespace via the following and see the host name to open the console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx ns myjenkins
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get ing
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jenkins X will have generated a username of &lt;strong&gt;admin&lt;/strong&gt; and a random password which is stored in your secret store (either Vault or your cloud secret manager).&lt;/p&gt;
&lt;p&gt;To find the admin password so that you can login to Jenkins try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get secret jenkins -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{.data.jenkins-admin-password}&amp;#34;&lt;/span&gt; | base64 --decode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find the URL to open Jenkins via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo http://&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;kubectl get ingress jenkins -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{.spec.rules[0].host}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V3: GitOps Recommendations</title>
      <link>https://jenkins-x.io/v3/admin/guides/jenkins/gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/jenkins/gitops/</guid>
      <description>
        
        
        &lt;p&gt;One of the awesome things about Jenkins is you can use it to do anything in any way you like. e.g. you can add/configure any Jenkins server via the UI which then modifies the state on disk. This can make things harder to manage at scale; tracking who changes what and to diagnose issues and perform backup and restore etc.&lt;/p&gt;
&lt;p&gt;We have been using the GitOps approach to managing things in production for the last few years on the Jenkins X project and it has lots of benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;every change is audited so you can see exactly what was changed and by who in git&lt;/li&gt;
&lt;li&gt;you can easily revert changes if they go bad&lt;/li&gt;
&lt;li&gt;all state being in git means its super easy to recreate your infrastructure in another region or using different machine types without complex backup/restore processes being in place&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we recommend trying to follow the GitOps approaches for your Jenkins servers too. e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try store in git all of the Jenkins servers with their &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/jenkins/getting-started/#configure-jenkins&#34;&gt;configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;try use the &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/jenkins/getting-started/#job-dsl&#34;&gt;Job DSL in git&lt;/a&gt; to import projects into your jenkins servers then its very easy to move projects to different servers via a simple Pull Request on the &lt;code&gt;.jx/gitops/source-config.yaml&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;try use &lt;a href=&#34;https://www.jenkins.io/projects/jcasc/&#34;&gt;Jenkins Configuration As Code&lt;/a&gt; as much as you can as its simpler and easier to work with via GitOps&lt;/li&gt;
&lt;li&gt;try use use &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt; to manage all of your secrets in a secret store like vault or your cloud providers secret manager via &lt;a href=&#34;https://jenkins-x.io/v3/admin/setup/secrets/&#34;&gt;Jenkins X secret support&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;you can then consume the secrets managed via &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt; using the &lt;a href=&#34;https://plugins.jenkins.io/kubernetes-credentials-provider/&#34;&gt;kubernetes credentials provider plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we use this mechanism to reuse the Jenkins X pipeline bot user and token we use for &lt;a href=&#34;https://github.com/tektoncd/pipeline&#34;&gt;tekton&lt;/a&gt; in each Jenkins server via properly labelled Secrets created via  &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;kubernetes external secrets&lt;/a&gt;. e.g. &lt;a href=&#34;https://github.com/jenkins-x-charts/jenkins-resources/blob/main/charts/jenkins-resources/templates/tekton-git-secret.yaml#L15-L18&#34;&gt;here&amp;rsquo;s how we share the git token&lt;/a&gt; by using a kubernetes Secret with the labels for the &lt;a href=&#34;https://plugins.jenkins.io/kubernetes-credentials-provider/&#34;&gt;kubernetes credentials provider plugin&lt;/a&gt; which is automatically populated from the vault / cloud provider secret store&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>V3: Jenkins Server Example</title>
      <link>https://jenkins-x.io/v3/admin/guides/jenkins/example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/guides/jenkins/example/</guid>
      <description>
        
        
        &lt;p&gt;This is an example on building a JX3 Google/GSM environment from scratch which includes a Jenkins server and the import of a pipeline. It will utilize DNS (&lt;code&gt;jx3rocks.com&lt;/code&gt;), TLS, Let&amp;rsquo;s Encrypt certificates,  and additional Jenkins plugins and installer resources. It is inteded for an audience already familiar with Jenkins X operability and focuses on an example of actual commands required to build and operate the  environment. Additional information regarding using Google as the provider for this example can be found under &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/tls_dns/#prerequisites&#34;&gt;Google Cloud Platform Prequisites&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 This doc has been designed to build the Jenkins server under the Google cloud platform. &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/jenkins/example/#initialize-jenkins-server-configuration&#34;&gt;The Jenkins server configuration steps&lt;/a&gt; have also been tested under &lt;b&gt;Azure&lt;/b&gt; and &lt;b&gt;Amazon&lt;/b&gt; cloud environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;initialize-the-infra-and-cluster-repos&#34;&gt;Initialize the Infra and Cluster Repos&lt;/h3&gt;
&lt;p&gt;Using a command-line based approach, the example employs a process modeled after the doc &lt;a href=&#34;https://jenkins-x.io/v3/admin/platforms/google&#34;&gt;Setup Jenkins X on Google Cloud with GKE&lt;/a&gt;, and will use Google Secret Manger. It requires installation of &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt; and &lt;a href=&#34;https://hub.github.com/&#34;&gt;Hub&lt;/a&gt; command line tools.&lt;/p&gt;
&lt;p&gt;The following are the values used for the creation of the Infra and Cluster repos:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Repo Source:		jx3-gitops-repositories
Infra Repo:		jx3-terraform-gke
Cluster Repo:		jx3-gke-gsm
Git Organization:	jx3rocksorg
JX3 Root Directory:	$JX3HOME                ## i.e. /home/user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Building infra repo: &lt;code&gt;https://github.com/jx3rocksorg/jx3-terraform-gke&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/jx3-gitops-repositories/jx3-terraform-gke.git jx3-terraform-gke
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd  jx3-terraform-gke
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote set-url origin https://github.com/jx3rocksorg/jx3-terraform-gke.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hub create -p jx3rocksorg/jx3-terraform-gke
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chore: Initial&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Buidling cluster repo: &lt;code&gt;https://github.com/jx3rocksorg/jx3-gke-gsm&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/jx3-gitops-repositories/jx3-gke-gsm.git jx3-gke-gsm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd jx3-gke-gsm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote set-url origin https://github.com/jx3rocksorg/jx3-gke-gsm.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hub create -p jx3rocksorg/jx3-gke-gsm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chore: Initial&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;manage-url-format&#34;&gt;Manage URL format&lt;/h3&gt;
&lt;p&gt;This example uses external DNS with subdomain and URLs will have a root of &lt;code&gt;web.jx3rocks.com&lt;/code&gt;. To avoid including the default string &lt;code&gt;&amp;quot;-jx&amp;quot;&lt;/code&gt;  in the URLs, the example blanks out the &lt;code&gt;spec:ingress:namespaceSubDomain&lt;/code&gt; value (&lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt;) in the &lt;code&gt;jx-requirements.yml&lt;/code&gt; file. To eliminate having non-unique URLs after doing this type of update, an additional &lt;code&gt;spec:environment:ingress:namespaceSubDomain&lt;/code&gt; line item is added (&lt;code&gt;&amp;quot;-stg.&amp;quot;&lt;/code&gt;) for the staging environment.&lt;/p&gt;
&lt;p&gt;File:&lt;code&gt;$JX3HOME/jx3-gke-gsm/jx-requirements.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;environments&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;namespaceSubDomain&lt;/span&gt;: -&lt;span style=&#34;color:#ae81ff&#34;&gt;stg.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;production&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;externalDNS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;namespaceSubDomain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;define-jenkins-plugins-and-installers&#34;&gt;Define Jenkins plugins and installers.&lt;/h3&gt;
&lt;p&gt;The default Jenkins server installation is a minimum configuration and generally requires additional installers and plugin components for the your specific Jenkins project to operate. The Jenkins components (i.e. plugins, installerss, etc.) are defined in 3 locations; Chart, System, and User configurations which get loaded in that order. During the build process settings get inherited and can be modified but depending on the end config how to make modifications may vary. This example takes into account the default configuration based upon the Chart and System settings. It will only require small additions to the configuration which is done at the User level. To make these config changes will require the modification of the User  &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Currently there is an issue where the Jenkins URL does not resolve to an IP address. To address this issue, it is imperative to have the &lt;code&gt;ingressClassName: nginx&lt;/code&gt; included in the values.yaml file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;File: &lt;code&gt;/tmp/values.yaml&lt;/code&gt; - Config Scripts&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;controller:
  ingress:             ## Required versionStream DNS/Ingress break fix
    ingressClassName: nginx
  JCasC:               ## Example of building an installer
    configScripts:
      mystuff: |
        tool:
          nodejs:
            installations:
            - name: &amp;#34;NodeJS&amp;#34;
              properties:
              - installSource:
                  installers:
                  - nodeJSInstaller:
                      id: &amp;#34;15.7.0&amp;#34;
                      npmPackagesRefreshHours: 72
  additionalPlugins:   ## Additional plugins for example
    - pipeline-stage-view:2.24
    - nodejs:1.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;initialize-jenkins-server-configuration&#34;&gt;Initialize Jenkins server configuration&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;jx gitops&lt;/code&gt; commands are used to create the Jenkins server configuration. More information can be found under &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/jenkins/getting-started/#adding-jenkins-servers-into-jenkins-x&#34;&gt;Adding Jenkins Server into Jenkins X&lt;/a&gt;. The example uses the following command sequence:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME/jx3-gke-gsm                             &lt;span style=&#34;color:#75715e&#34;&gt;## cluster repo root&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops jenkins add --name jx-jenkins             &lt;span style=&#34;color:#75715e&#34;&gt;## add Jenkins&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops helmfile resolve --namespace jx-jenkins   &lt;span style=&#34;color:#75715e&#34;&gt;## resolve charts references (optional but helps later on in editing)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp /tmp/values.yaml helmfiles/jx-jenkins            &lt;span style=&#34;color:#75715e&#34;&gt;## Update tool config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;push-initial-changes-to-cluster-repo&#34;&gt;Push initial changes to cluster repo&lt;/h3&gt;
&lt;p&gt;All the customizations for the cluster repo are now propagated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME/jx3-gke-gsm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -a -m “chore: Jenkins example init”
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push	
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-the-infrastucture-with-terraform&#34;&gt;Build the infrastucture with Terraform&lt;/h3&gt;
&lt;p&gt;The following TF_VAR environment variables are set prior to running Terraform commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TF_VAR_gcp_project=&amp;lt;google project&amp;gt;
TF_VAR_apex_domain_gcp_project=&amp;lt;google project&amp;gt;
TF_VAR_jx_bot_username=&amp;lt;git username&amp;gt;
TF_VAR_jx_bot_token=&amp;lt;git token&amp;gt;
TF_VAR_tls_email=mymail@jx3rocks.com

TF_VAR_apex_domain=jx3rocks.com
TF_VAR_subdomain=web

TF_VAR_gsm=true
TF_VAR_cluster_name=jx3web
TF_VAR_cluster_location=us-east1-b
TF_VAR_jx_git_url=https://github.com/jx3rocksorg/jx3-gke-gsm.src.git
TF_VAR_lets_encrypt_production=false
TF_VAR_force_destroy=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Additional detail on Terraform settings can be found under &lt;a href=&#34;https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/main/README.md&#34;&gt;Google Terraform Quickstart Template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Commands to build intrastructure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME/jx3-terraform-gke
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin/create.sh                &lt;span style=&#34;color:#75715e&#34;&gt;# Performs terraform init, plan and apply&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;enable-prod-certificate&#34;&gt;Enable prod certificate&lt;/h3&gt;
&lt;p&gt;This example employs TLS and accesing Jenkins from a browser requires a valid production certificate. It should be noted that TLS is not supported with automated domains &lt;code&gt;(i.e. nip.io)&lt;/code&gt;. The process will begin by installing a Let&amp;rsquo;s Encrypt test certicate. After the initial build completes and is successful, it’s best to ensure that the test certificate is ready (READY=True) before enabing the production certificate. You can find more information regarding this subject under &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/tls_dns/&#34;&gt;TLS and DNS&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Set credentials&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud container clusters get-credentials jx3web --zone us-east1-b 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Set jx namespace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx ns jx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Check certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get cert -n jx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                     READY   SECRET                   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tls-web-jx3rocks-com-s   True    tls-web-jx3rocks-com-s   39m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enabling the production certificate will require updates to both infra &lt;code&gt;(jx-terraform-gke)&lt;/code&gt; and cluster &lt;code&gt;(jx3-gke-gsm)&lt;/code&gt; repos. The commands to create the prod certificate are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME/jx3-gke-gsm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull         &lt;span style=&#34;color:#75715e&#34;&gt;## Make sure local cluster repo is up to date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME/jx3-terraform-gke
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export TF_VAR_lets_encrypt_production&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;terraform apply -auto-approve 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $JX3HOME/jx3-gke-gsm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit --allow-empty -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dummy commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx admin log     &lt;span style=&#34;color:#75715e&#34;&gt;## Make sure it completes before proceeding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull         &lt;span style=&#34;color:#75715e&#34;&gt;## Once successful refresh local cluster repo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;$JX3HOME/jx3-gke-gsm/jx-requirements.yml&lt;/code&gt; file&amp;rsquo;s TLS production setting should now be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ingress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;domain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;web.jx3rocks.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;externalDNS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;namespaceSubDomain&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mymail@jx3rocks.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;production&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, the example checks the certificates status till the production certifacte is ready before proceeding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get cert -n jx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                     READY   SECRET                   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tls-web-jx3rocks-com-p   True    tls-web-jx3rocks-com-p   39m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tls-web-jx3rocks-com-s   True    tls-web-jx3rocks-com-s   86m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sign-on-to-jenkins&#34;&gt;Sign on to Jenkins&lt;/h3&gt;
&lt;p&gt;After production certificates become ready, access to the Jenkins site: &lt;a href=&#34;https://jenkins.web.jx3rocks.com&#34;&gt;https://jenkins.web.jx3rocks.com&lt;/a&gt; is now available. The site has been configure with an &lt;code&gt;admin&lt;/code&gt; user id and to obtain the &lt;code&gt;admin&lt;/code&gt; user password the following commands are used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get secret -n jx-jenkins jenkins -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{.data.jenkins-admin-password}&amp;#34;&lt;/span&gt; | base64 --decode; echo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deploy-jenkins-pipeline&#34;&gt;Deploy Jenkins Pipeline&lt;/h3&gt;
&lt;p&gt;To deploy a Jenkins Pipeline requires a &lt;code&gt;Jenkinsfile&lt;/code&gt; file and can be created through either a &lt;code&gt;jx project import&lt;/code&gt; or &lt;code&gt;jx project quickstart&lt;/code&gt; command. You can find more detail in &lt;a href=&#34;https://jenkins-x.io/v3/admin/guides/jenkins/getting-started/#importing-projects-or-creating-quickstarts&#34;&gt;Importing project or creating quickstarts&lt;/a&gt;. This example creates a file &lt;code&gt;Jenkinsfile&lt;/code&gt; in a new project directory (&lt;code&gt;jx-example-node&lt;/code&gt;) and executes the &lt;code&gt;jx project import&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;File: &lt;code&gt;~/jx-example-node/Jenkinsfile&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pipeline {
    agent none
stages {
        stage (&amp;#39;First&amp;#39;) {
            agent any
            steps {
                echo &amp;#34;First dummy stage&amp;#34;
            }
        }
        stage (&amp;#39;Input&amp;#39;) {

            steps {
                script {
                    myStage = input message: &amp;#39;What service type do you want to run now?&amp;#39;, parameters: [choice(choices: &amp;#39;Create\nUpdate&amp;#39;, description: &amp;#39;&amp;#39;, name: &amp;#39;Stage&amp;#39;)]
                }
                echo myStage
            }
        }
stage(&amp;#39;Stage1&amp;#39;) {
            when {
                expression { myStage == &amp;#39;Create&amp;#39; }
            }
            steps {
                echo &amp;#34;Running Service: Create&amp;#34;
            }
        }
stage(&amp;#39;Stage2&amp;#39;) {
            when {
                expression { myStage == &amp;#39;Update&amp;#39; }
            }
            steps {
                echo &amp;#34;Running Service:Update&amp;#34;
            }
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Import the project to deploy the pipeline&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx project import --git-token &amp;lt;token&amp;gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;                  --git-username &amp;lt;git user&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;                  --org jx3rocksorg &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;                  --jenkins jx-jenkins &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;                  --dir ~/jx-example-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;                  --name jx-example-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;                  --batch-mode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;restarting-jenkins-pod-after-pipeline-deployment&#34;&gt;Restarting Jenkins pod after pipeline deployment.&lt;/h3&gt;
&lt;p&gt;When the above pipeline is deployed it may be necessary to restart the Jenkins pod berfore you see it appear in the Jenkins dashboard.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl delete pod jenkins-0 -n jx-jenkins            ## Restarts Jenkins pods
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;adding-github-webhook-optional&#34;&gt;Adding Github Webhook (optional)&lt;/h3&gt;
&lt;p&gt;The current default configuration of JX3 for the import of Jenkins projects does not include the creation of a GitHub webhook for automated pipeline execution. You can use an GitHub API call to set up a webhook to provide a mechanism to kick off a pipeline when there&amp;rsquo;s an update to the project&amp;rsquo;s repo. Below is an example of the API call for this Jenkins configuration and import project example.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -X POST \
  https://api.github.com/repos/jx3rocksorg/jx-example-node/hooks \
  -H &amp;#39;authorization: token &amp;lt;API_TOKEN&amp;gt;&amp;#39; \
  -H &amp;#39;cache-control: no-cache&amp;#39; \
  -d &amp;#39;{ 
  &amp;#34;config&amp;#34;: { 
    &amp;#34;url&amp;#34;: &amp;#34;https://jenkins.web.jx3rocks.com/github-webhook/&amp;#34;
  }, 
  &amp;#34;events&amp;#34;: [ 
    &amp;#34;issues&amp;#34;, 
    &amp;#34;issue_comment&amp;#34;, 
    &amp;#34;pull_request&amp;#34;, 
    &amp;#34;pull_request_review&amp;#34;, 
    &amp;#34;pull_request_review_comment&amp;#34;, 
    &amp;#34;commit_comment&amp;#34;, 
    &amp;#34;push&amp;#34;, 
    &amp;#34;release&amp;#34;, 
    &amp;#34;create&amp;#34;, 
    &amp;#34;delete&amp;#34; 
  ] 
}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following this setup subsequent changes to the Jenkins project repo&amp;rsquo;s &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;, and &lt;code&gt;PR-*&lt;/code&gt; branches should now automatically kick off a pipeline.&lt;/p&gt;
&lt;p&gt;You could also set up a GitHub webhook for the Jenkins project using the GitHub UI. More details can be found at &lt;a href=&#34;https://docs.github.com/en/developers/webhooks-and-events/creating-webhooks&#34;&gt;https://docs.github.com/en/developers/webhooks-and-events/creating-webhooks&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;removing-the-jenkins-server-and-repo&#34;&gt;Removing the Jenkins server and repo&lt;/h3&gt;
&lt;p&gt;The Jenkins server definition and repos can be found in the&lt;b&gt;&lt;code&gt;$JX3HOME/.jx/gitops/source-config.yaml&lt;/code&gt;&lt;/b&gt;file. This example&amp;rsquo;s file is the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: gitops.jenkins-x.io/v1alpha1
kind: SourceConfig
metadata:
  creationTimestamp: null
spec:
  jenkinsServers:
  - groups:
    - owner: jx3rocksorg
      provider: https://github.com
      providerKind: github
      repositories:
      - name: jx-example-node
    server: jx-jenkins
  slack:
    channel: &amp;#39;#jenkins-x-pipelines&amp;#39;
    kind: failureOrNextSuccess
    pipeline: release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Commands to remove Jenkins resources and repo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm $JX3HOME/jx3-gke-gsm/.jx/gitops/source-config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf $JX3HOME/jx3-gke-gsm/helmfiles/jx-jenkins
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/jx-jenkins/d&amp;#39;&lt;/span&gt; $JX3HOME/jx3-gke-gsm/helmfile.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hub delete -y jx3rocksorg/jx-example-node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chore: remove jenkins&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;Sometimes Jenkins requires attention due to invalid plugin versions and/or syntax. The following commands are helpful in debugging:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl logs -f jenkins-0 -n jx-jenkins -c init       &lt;span style=&#34;color:#75715e&#34;&gt;## View init container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl logs -f jenkins-0 -n jx-jenkins -c jenkins    &lt;span style=&#34;color:#75715e&#34;&gt;## View jenkins container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl delete pod jenkins-0 -n jx-jenkins            &lt;span style=&#34;color:#75715e&#34;&gt;## Restarts Jenkins pods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
